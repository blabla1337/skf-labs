{"version":3,"sources":["../../../lib/csv/stream-converter.js"],"names":["jconv","StreamConverter","inner","options","innerEncoding","toUpperCase","outerEncoding","innerBOM","outerBOM","writeStarted","data","Buffer","from","convert","event","handler","addListener","removeListener","encoding","callback","Function","undefined","write","length","bomless","alloc","copy","convertInwards","destination","reverseConverter","pipe","close","type","on","chunk","convertOutwards","once","end","value","emit","module","exports"],"mappings":"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","sourcesContent":["// =======================================================================================================\r\n// StreamConverter\r\n//\r\n// convert between encoding schemes in a stream\r\n// Work in Progress - Will complete this at some point\r\nlet jconv;\r\n\r\nclass StreamConverter {\r\n  constructor(inner, options) {\r\n    this.inner = inner;\r\n\r\n    options = options || {};\r\n    this.innerEncoding = (options.innerEncoding || 'UTF8').toUpperCase();\r\n    this.outerEncoding = (options.outerEncoding || 'UTF8').toUpperCase();\r\n\r\n    this.innerBOM = options.innerBOM || null;\r\n    this.outerBOM = options.outerBOM || null;\r\n\r\n    this.writeStarted = false;\r\n  }\r\n\r\n  convertInwards(data) {\r\n    if (data) {\r\n      if (typeof data === 'string') {\r\n        data = Buffer.from(data, this.outerEncoding);\r\n      }\r\n\r\n      if (this.innerEncoding !== this.outerEncoding) {\r\n        data = jconv.convert(data, this.outerEncoding, this.innerEncoding);\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  convertOutwards(data) {\r\n    if (typeof data === 'string') {\r\n      data = Buffer.from(data, this.innerEncoding);\r\n    }\r\n\r\n    if (this.innerEncoding !== this.outerEncoding) {\r\n      data = jconv.convert(data, this.innerEncoding, this.outerEncoding);\r\n    }\r\n    return data;\r\n  }\r\n\r\n  addListener(event, handler) {\r\n    this.inner.addListener(event, handler);\r\n  }\r\n\r\n  removeListener(event, handler) {\r\n    this.inner.removeListener(event, handler);\r\n  }\r\n\r\n  write(data, encoding, callback) {\r\n    if (encoding instanceof Function) {\r\n      callback = encoding;\r\n      encoding = undefined;\r\n    }\r\n\r\n    if (!this.writeStarted) {\r\n      // if inner encoding has BOM, write it now\r\n      if (this.innerBOM) {\r\n        this.inner.write(this.innerBOM);\r\n      }\r\n\r\n      // if outer encoding has BOM, delete it now\r\n      if (this.outerBOM) {\r\n        if (data.length <= this.outerBOM.length) {\r\n          if (callback) {\r\n            callback();\r\n          }\r\n          return;\r\n        }\r\n        const bomless = Buffer.alloc(data.length - this.outerBOM.length);\r\n        data.copy(bomless, 0, this.outerBOM.length, data.length);\r\n        data = bomless;\r\n      }\r\n\r\n      this.writeStarted = true;\r\n    }\r\n\r\n    this.inner.write(\r\n      this.convertInwards(data),\r\n      encoding ? this.innerEncoding : undefined,\r\n      callback\r\n    );\r\n  }\r\n\r\n  read() {\r\n    // TBD\r\n  }\r\n\r\n  pipe(destination, options) {\r\n    const reverseConverter = new StreamConverter(destination, {\r\n      innerEncoding: this.outerEncoding,\r\n      outerEncoding: this.innerEncoding,\r\n      innerBOM: this.outerBOM,\r\n      outerBOM: this.innerBOM,\r\n    });\r\n\r\n    this.inner.pipe(reverseConverter, options);\r\n  }\r\n\r\n  close() {\r\n    this.inner.close();\r\n  }\r\n\r\n  on(type, callback) {\r\n    switch (type) {\r\n      case 'data':\r\n        this.inner.on('data', chunk => {\r\n          callback(this.convertOutwards(chunk));\r\n        });\r\n        return this;\r\n      default:\r\n        this.inner.on(type, callback);\r\n        return this;\r\n    }\r\n  }\r\n\r\n  once(type, callback) {\r\n    this.inner.once(type, callback);\r\n  }\r\n\r\n  end(chunk, encoding, callback) {\r\n    this.inner.end(this.convertInwards(chunk), this.innerEncoding, callback);\r\n  }\r\n\r\n  emit(type, value) {\r\n    this.inner.emit(type, value);\r\n  }\r\n}\r\n\r\nmodule.exports = StreamConverter;\r\n"],"file":"stream-converter.js"}