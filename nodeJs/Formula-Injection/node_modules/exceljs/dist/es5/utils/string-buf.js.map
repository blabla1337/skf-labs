{"version":3,"sources":["../../../lib/utils/string-buf.js"],"names":["StringBuf","options","_buf","Buffer","alloc","size","_encoding","encoding","_inPos","_buffer","undefined","length","copy","position","min","buf","text","inPos","write","_grow","inBuf","capacity","module","exports"],"mappings":";;;;;;;;AAAA;AACA;IACMA,S;AACJ,qBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKC,IAAL,GAAYC,MAAM,CAACC,KAAP,CAAcH,OAAO,IAAIA,OAAO,CAACI,IAApB,IAA6B,KAA1C,CAAZ;AACA,SAAKC,SAAL,GAAkBL,OAAO,IAAIA,OAAO,CAACM,QAApB,IAAiC,MAAlD,CAFmB,CAInB;;AACA,SAAKC,MAAL,GAAc,CAAd,CALmB,CAOnB;;AACA,SAAKC,OAAL,GAAeC,SAAf;AACD;;;;+BAcU;AACT;AACA,UAAI,CAAC,KAAKD,OAAV,EAAmB;AACjB,aAAKA,OAAL,GAAeN,MAAM,CAACC,KAAP,CAAa,KAAKO,MAAlB,CAAf;;AACA,aAAKT,IAAL,CAAUU,IAAV,CAAe,KAAKH,OAApB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAKE,MAAxC;AACD;;AACD,aAAO,KAAKF,OAAZ;AACD;;;0BAEKI,Q,EAAU;AACdA,MAAAA,QAAQ,GAAGA,QAAQ,IAAI,CAAvB;AACA,WAAKJ,OAAL,GAAeC,SAAf;AACA,WAAKF,MAAL,GAAcK,QAAd;AACD;;;0BAEKC,G,EAAK;AACT,UAAIT,IAAI,GAAG,KAAKH,IAAL,CAAUS,MAAV,GAAmB,CAA9B;;AACA,aAAON,IAAI,GAAGS,GAAd,EAAmB;AACjBT,QAAAA,IAAI,IAAI,CAAR;AACD;;AACD,UAAMU,GAAG,GAAGZ,MAAM,CAACC,KAAP,CAAaC,IAAb,CAAZ;;AACA,WAAKH,IAAL,CAAUU,IAAV,CAAeG,GAAf,EAAoB,CAApB;;AACA,WAAKb,IAAL,GAAYa,GAAZ;AACD;;;4BAEOC,I,EAAM;AACZ,WAAKP,OAAL,GAAeC,SAAf;;AAEA,UAAIO,KAAK,GAAG,KAAKT,MAAL,GAAc,KAAKN,IAAL,CAAUgB,KAAV,CAAgBF,IAAhB,EAAsB,KAAKR,MAA3B,EAAmC,KAAKF,SAAxC,CAA1B,CAHY,CAKZ;;;AACA,aAAOW,KAAK,IAAI,KAAKf,IAAL,CAAUS,MAAV,GAAmB,CAAnC,EAAsC;AACpC,aAAKQ,KAAL,CAAW,KAAKX,MAAL,GAAcQ,IAAI,CAACL,MAA9B,EADoC,CAGpC;;;AACAM,QAAAA,KAAK,GAAG,KAAKT,MAAL,GAAc,KAAKN,IAAL,CAAUgB,KAAV,CAAgBF,IAAhB,EAAsB,KAAKR,MAA3B,EAAmC,KAAKF,SAAxC,CAAtB;AACD;;AAED,WAAKE,MAAL,GAAcS,KAAd;AACD;;;iCAEYG,K,EAAO;AAClB,UAAIA,KAAK,CAACT,MAAV,EAAkB;AAChB,aAAKF,OAAL,GAAeC,SAAf;;AAEA,YAAI,KAAKC,MAAL,GAAcS,KAAK,CAACT,MAApB,GAA6B,KAAKU,QAAtC,EAAgD;AAC9C,eAAKF,KAAL,CAAW,KAAKR,MAAL,GAAcS,KAAK,CAACT,MAA/B;AACD,SALe,CAMhB;;;AACAS,QAAAA,KAAK,CAAClB,IAAN,CAAWU,IAAX,CAAgB,KAAKV,IAArB,EAA2B,KAAKM,MAAhC,EAAwC,CAAxC,EAA2CY,KAAK,CAACT,MAAjD;;AACA,aAAKH,MAAL,IAAeY,KAAK,CAACT,MAArB;AACD;AACF;;;wBAhEY;AACX,aAAO,KAAKH,MAAZ;AACD;;;wBAEc;AACb,aAAO,KAAKN,IAAL,CAAUS,MAAjB;AACD;;;wBAEY;AACX,aAAO,KAAKT,IAAZ;AACD;;;;;;AAyDHoB,MAAM,CAACC,OAAP,GAAiBvB,SAAjB","sourcesContent":["// StringBuf - a way to keep string memory operations to a minimum\r\n// while building the strings for the xml files\r\nclass StringBuf {\r\n  constructor(options) {\r\n    this._buf = Buffer.alloc((options && options.size) || 16384);\r\n    this._encoding = (options && options.encoding) || 'utf8';\r\n\r\n    // where in the buffer we are at\r\n    this._inPos = 0;\r\n\r\n    // for use by toBuffer()\r\n    this._buffer = undefined;\r\n  }\r\n\r\n  get length() {\r\n    return this._inPos;\r\n  }\r\n\r\n  get capacity() {\r\n    return this._buf.length;\r\n  }\r\n\r\n  get buffer() {\r\n    return this._buf;\r\n  }\r\n\r\n  toBuffer() {\r\n    // return the current data as a single enclosing buffer\r\n    if (!this._buffer) {\r\n      this._buffer = Buffer.alloc(this.length);\r\n      this._buf.copy(this._buffer, 0, 0, this.length);\r\n    }\r\n    return this._buffer;\r\n  }\r\n\r\n  reset(position) {\r\n    position = position || 0;\r\n    this._buffer = undefined;\r\n    this._inPos = position;\r\n  }\r\n\r\n  _grow(min) {\r\n    let size = this._buf.length * 2;\r\n    while (size < min) {\r\n      size *= 2;\r\n    }\r\n    const buf = Buffer.alloc(size);\r\n    this._buf.copy(buf, 0);\r\n    this._buf = buf;\r\n  }\r\n\r\n  addText(text) {\r\n    this._buffer = undefined;\r\n\r\n    let inPos = this._inPos + this._buf.write(text, this._inPos, this._encoding);\r\n\r\n    // if we've hit (or nearing capacity), grow the buf\r\n    while (inPos >= this._buf.length - 4) {\r\n      this._grow(this._inPos + text.length);\r\n\r\n      // keep trying to write until we've completely written the text\r\n      inPos = this._inPos + this._buf.write(text, this._inPos, this._encoding);\r\n    }\r\n\r\n    this._inPos = inPos;\r\n  }\r\n\r\n  addStringBuf(inBuf) {\r\n    if (inBuf.length) {\r\n      this._buffer = undefined;\r\n\r\n      if (this.length + inBuf.length > this.capacity) {\r\n        this._grow(this.length + inBuf.length);\r\n      }\r\n      // eslint-disable-next-line no-underscore-dangle\r\n      inBuf._buf.copy(this._buf, this._inPos, 0, inBuf.length);\r\n      this._inPos += inBuf.length;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = StringBuf;\r\n"],"file":"string-buf.js"}