{"version":3,"sources":["../../../lib/utils/iterate-stream.js"],"names":["module","exports","stream","contents","on","data","push","streamEndedPromise","Promise","resolve","resolveStreamEndedPromise","ended","error","err","length","resume","race","once","pause","shift","iterateStream","eventEmitter","type","fired","handler","removeListener","addListener"],"mappings":";;;;;;;;;;;;;;;;;;AAAAA,MAAM,CAACC,OAAP;AAAA,iFAAiB,iBAA8BC,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,YAAAA,QADS,GACE,EADF;AAEfD,YAAAA,MAAM,CAACE,EAAP,CAAU,MAAV,EAAkB,UAAAC,IAAI;AAAA,qBAAIF,QAAQ,CAACG,IAAT,CAAcD,IAAd,CAAJ;AAAA,aAAtB;AAGME,YAAAA,kBALS,GAKY,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,qBAAKC,yBAAyB,GAAGD,OAAjC;AAAA,aAAnB,CALZ;AAOXE,YAAAA,KAPW,GAOH,KAPG;AAQfT,YAAAA,MAAM,CAACE,EAAP,CAAU,KAAV,EAAiB,YAAM;AACrBO,cAAAA,KAAK,GAAG,IAAR;AACAD,cAAAA,yBAAyB;AAC1B,aAHD;AAKIE,YAAAA,KAbW,GAaH,KAbG;AAcfV,YAAAA,MAAM,CAACE,EAAP,CAAU,OAAV,EAAmB,UAAAS,GAAG,EAAI;AACxBD,cAAAA,KAAK,GAAGC,GAAR;AACAH,cAAAA,yBAAyB;AAC1B,aAHD;;AAde;AAAA,kBAmBR,CAACC,KAAD,IAAUR,QAAQ,CAACW,MAAT,GAAkB,CAnBpB;AAAA;AAAA;AAAA;;AAAA,kBAoBTX,QAAQ,CAACW,MAAT,KAAoB,CApBX;AAAA;AAAA;AAAA;;AAqBXZ,YAAAA,MAAM,CAACa,MAAP,GArBW,CAsBX;;AAtBW;AAAA,wCAuBLP,OAAO,CAACQ,IAAR,CAAa,CAACC,IAAI,CAACf,MAAD,EAAS,MAAT,CAAL,EAAuBK,kBAAvB,CAAb,CAvBK;;AAAA;AAAA;AAAA;;AAAA;AAyBXL,YAAAA,MAAM,CAACgB,KAAP;AACMb,YAAAA,IA1BK,GA0BEF,QAAQ,CAACgB,KAAT,EA1BF;AAAA;AA2BX,mBAAMd,IAAN;;AA3BW;AAAA,iBA6BTO,KA7BS;AAAA;AAAA;AAAA;;AAAA,kBA6BIA,KA7BJ;;AAAA;AAAA;AAAA;;AAAA;AA+BfF,YAAAA,yBAAyB;;AA/BV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA,WAAiCU,aAAjC;AAAA;AAAA;;AAAA,SAAiCA,aAAjC;AAAA;;AAkCA,SAASH,IAAT,CAAcI,YAAd,EAA4BC,IAA5B,EAAkC;AAChC;AACA,SAAO,IAAId,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5B,QAAIc,KAAK,GAAG,KAAZ;;AACA,QAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,UAAI,CAACD,KAAL,EAAY;AACVA,QAAAA,KAAK,GAAG,IAAR;AACAF,QAAAA,YAAY,CAACI,cAAb,CAA4BH,IAA5B,EAAkCE,OAAlC;AACAf,QAAAA,OAAO;AACR;AACF,KAND;;AAOAY,IAAAA,YAAY,CAACK,WAAb,CAAyBJ,IAAzB,EAA+BE,OAA/B;AACD,GAVM,CAAP;AAWD","sourcesContent":["module.exports = async function* iterateStream(stream) {\r\n  const contents = [];\r\n  stream.on('data', data => contents.push(data));\r\n\r\n  let resolveStreamEndedPromise;\r\n  const streamEndedPromise = new Promise(resolve => (resolveStreamEndedPromise = resolve));\r\n\r\n  let ended = false;\r\n  stream.on('end', () => {\r\n    ended = true;\r\n    resolveStreamEndedPromise();\r\n  });\r\n\r\n  let error = false;\r\n  stream.on('error', err => {\r\n    error = err;\r\n    resolveStreamEndedPromise();\r\n  });\r\n\r\n  while (!ended || contents.length > 0) {\r\n    if (contents.length === 0) {\r\n      stream.resume();\r\n      // eslint-disable-next-line no-await-in-loop\r\n      await Promise.race([once(stream, 'data'), streamEndedPromise]);\r\n    } else {\r\n      stream.pause();\r\n      const data = contents.shift();\r\n      yield data;\r\n    }\r\n    if (error) throw error;\r\n  }\r\n  resolveStreamEndedPromise();\r\n};\r\n\r\nfunction once(eventEmitter, type) {\r\n  // TODO: Use require('events').once when node v10 is dropped\r\n  return new Promise(resolve => {\r\n    let fired = false;\r\n    const handler = () => {\r\n      if (!fired) {\r\n        fired = true;\r\n        eventEmitter.removeListener(type, handler);\r\n        resolve();\r\n      }\r\n    };\r\n    eventEmitter.addListener(type, handler);\r\n  });\r\n}\r\n"],"file":"iterate-stream.js"}