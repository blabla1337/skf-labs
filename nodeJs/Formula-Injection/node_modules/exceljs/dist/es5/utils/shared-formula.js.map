{"version":3,"sources":["../../../lib/utils/shared-formula.js"],"names":["colCache","require","replacementCandidateRx","CRrx","slideFormula","formula","fromCell","toCell","offset","decode","to","replace","refMatch","sheet","sheetMaybe","addrPart","trailingParen","match","exec","colDollar","colStr","toUpperCase","rowDollar","rowStr","length","col","l2n","row","parseInt","res","n2l","module","exports"],"mappings":";;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAxB,C,CAEA;;;AACA,IAAMC,sBAAsB,GAAG,4CAA/B;AACA,IAAMC,IAAI,GAAG,sCAAb;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,QAA/B,EAAyCC,MAAzC,EAAiD;AAC/C,MAAMC,MAAM,GAAGR,QAAQ,CAACS,MAAT,CAAgBH,QAAhB,CAAf;AACA,MAAMI,EAAE,GAAGV,QAAQ,CAACS,MAAT,CAAgBF,MAAhB,CAAX;AACA,SAAOF,OAAO,CAACM,OAAR,CACLT,sBADK,EAEL,UAACU,QAAD,EAAWC,KAAX,EAAkBC,UAAlB,EAA8BC,QAA9B,EAAwCC,aAAxC,EAA0D;AACxD,QAAIA,aAAJ,EAAmB;AACjB,aAAOJ,QAAP;AACD;;AACD,QAAMK,KAAK,GAAGd,IAAI,CAACe,IAAL,CAAUH,QAAV,CAAd;;AACA,QAAIE,KAAJ,EAAW;AACT,UAAME,SAAS,GAAGF,KAAK,CAAC,CAAD,CAAvB;AACA,UAAMG,MAAM,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASI,WAAT,EAAf;AACA,UAAMC,SAAS,GAAGL,KAAK,CAAC,CAAD,CAAvB;AACA,UAAMM,MAAM,GAAGN,KAAK,CAAC,CAAD,CAApB;;AACA,UAAIG,MAAM,CAACI,MAAP,GAAgB,CAAhB,IAAsBJ,MAAM,CAACI,MAAP,KAAkB,CAAlB,IAAuBJ,MAAM,GAAG,KAA1D,EAAkE;AAChE;AACA,eAAOR,QAAP;AACD;;AACD,UAAIa,GAAG,GAAGzB,QAAQ,CAAC0B,GAAT,CAAaN,MAAb,CAAV;AACA,UAAIO,GAAG,GAAGC,QAAQ,CAACL,MAAD,EAAS,EAAT,CAAlB;;AACA,UAAI,CAACJ,SAAL,EAAgB;AACdM,QAAAA,GAAG,IAAIf,EAAE,CAACe,GAAH,GAASjB,MAAM,CAACiB,GAAvB;AACD;;AACD,UAAI,CAACH,SAAL,EAAgB;AACdK,QAAAA,GAAG,IAAIjB,EAAE,CAACiB,GAAH,GAASnB,MAAM,CAACmB,GAAvB;AACD;;AACD,UAAME,GAAG,GAAG,CAAChB,KAAK,IAAI,EAAV,KAAiBM,SAAS,IAAI,EAA9B,IAAoCnB,QAAQ,CAAC8B,GAAT,CAAaL,GAAb,CAApC,IAAyDH,SAAS,IAAI,EAAtE,IAA4EK,GAAxF;AACA,aAAOE,GAAP;AACD;;AACD,WAAOjB,QAAP;AACD,GA5BI,CAAP;AA8BD;;AAEDmB,MAAM,CAACC,OAAP,GAAiB;AACf5B,EAAAA,YAAY,EAAZA;AADe,CAAjB","sourcesContent":["const colCache = require('./col-cache');\r\n\r\n// const cellRefRegex = /(([a-z_\\-0-9]*)!)?[$]?([a-z]+)[$]?([1-9][0-9]*)/i;\r\nconst replacementCandidateRx = /(([a-z_\\-0-9]*)!)?([a-z0-9_$]{2,})([(])?/gi;\r\nconst CRrx = /^([$])?([a-z]+)([$])?([1-9][0-9]*)$/i;\r\n\r\nfunction slideFormula(formula, fromCell, toCell) {\r\n  const offset = colCache.decode(fromCell);\r\n  const to = colCache.decode(toCell);\r\n  return formula.replace(\r\n    replacementCandidateRx,\r\n    (refMatch, sheet, sheetMaybe, addrPart, trailingParen) => {\r\n      if (trailingParen) {\r\n        return refMatch;\r\n      }\r\n      const match = CRrx.exec(addrPart);\r\n      if (match) {\r\n        const colDollar = match[1];\r\n        const colStr = match[2].toUpperCase();\r\n        const rowDollar = match[3];\r\n        const rowStr = match[4];\r\n        if (colStr.length > 3 || (colStr.length === 3 && colStr > 'XFD')) {\r\n          // > XFD is the highest col number in excel 2007 and beyond, so this is a named range\r\n          return refMatch;\r\n        }\r\n        let col = colCache.l2n(colStr);\r\n        let row = parseInt(rowStr, 10);\r\n        if (!colDollar) {\r\n          col += to.col - offset.col;\r\n        }\r\n        if (!rowDollar) {\r\n          row += to.row - offset.row;\r\n        }\r\n        const res = (sheet || '') + (colDollar || '') + colCache.n2l(col) + (rowDollar || '') + row;\r\n        return res;\r\n      }\r\n      return refMatch;\r\n    }\r\n  );\r\n}\r\n\r\nmodule.exports = {\r\n  slideFormula,\r\n};\r\n"],"file":"shared-formula.js"}