{"version":3,"sources":["../../../lib/utils/parse-sax.js"],"names":["require","SaxesParser","PassThrough","bufferToString","module","exports","iterable","pipe","Symbol","asyncIterator","saxesParser","on","err","error","events","value","push","eventType","chunk","write"],"mappings":";;;;;;;;;;;;;;;;;;;;eAAsBA,OAAO,CAAC,OAAD,C;IAAtBC,W,YAAAA,W;;gBACeD,OAAO,CAAC,iBAAD,C;IAAtBE,W,aAAAA,W;;gBACkBF,OAAO,CAAC,yBAAD,C;IAAzBG,c,aAAAA,c;;AAEPC,MAAM,CAACC,OAAP;AAAA,uEAAiB,iBAAiBC,QAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACf;AACA;AACA,gBAAIA,QAAQ,CAACC,IAAT,IAAiB,CAACD,QAAQ,CAACE,MAAM,CAACC,aAAR,CAA9B,EAAsD;AACpDH,cAAAA,QAAQ,GAAGA,QAAQ,CAACC,IAAT,CAAc,IAAIL,WAAJ,EAAd,CAAX;AACD;;AACKQ,YAAAA,WANS,GAMK,IAAIT,WAAJ,EANL;AAQfS,YAAAA,WAAW,CAACC,EAAZ,CAAe,OAAf,EAAwB,UAAAC,GAAG,EAAI;AAC7BC,cAAAA,KAAK,GAAGD,GAAR;AACD,aAFD;AAGIE,YAAAA,MAXW,GAWF,EAXE;AAYfJ,YAAAA,WAAW,CAACC,EAAZ,CAAe,SAAf,EAA0B,UAAAI,KAAK;AAAA,qBAAID,MAAM,CAACE,IAAP,CAAY;AAACC,gBAAAA,SAAS,EAAE,SAAZ;AAAuBF,gBAAAA,KAAK,EAALA;AAAvB,eAAZ,CAAJ;AAAA,aAA/B;AACAL,YAAAA,WAAW,CAACC,EAAZ,CAAe,MAAf,EAAuB,UAAAI,KAAK;AAAA,qBAAID,MAAM,CAACE,IAAP,CAAY;AAACC,gBAAAA,SAAS,EAAE,MAAZ;AAAoBF,gBAAAA,KAAK,EAALA;AAApB,eAAZ,CAAJ;AAAA,aAA5B;AACAL,YAAAA,WAAW,CAACC,EAAZ,CAAe,UAAf,EAA2B,UAAAI,KAAK;AAAA,qBAAID,MAAM,CAACE,IAAP,CAAY;AAACC,gBAAAA,SAAS,EAAE,UAAZ;AAAwBF,gBAAAA,KAAK,EAALA;AAAxB,eAAZ,CAAJ;AAAA,aAAhC;AAde;AAAA;AAAA;AAAA,uCAeWT,QAfX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAeEY,YAAAA,KAfF;AAgBbR,YAAAA,WAAW,CAACS,KAAZ,CAAkBhB,cAAc,CAACe,KAAD,CAAhC,EAhBa,CAiBb;AACA;;AAlBa,iBAmBTL,KAnBS;AAAA;AAAA;AAAA;;AAAA,kBAmBIA,KAnBJ;;AAAA;AAAA;AAsBb,mBAAMC,MAAN;;AAtBa;AAuBbA,YAAAA,MAAM,GAAG,EAAT;;AAvBa;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const {SaxesParser} = require('saxes');\r\nconst {PassThrough} = require('readable-stream');\r\nconst {bufferToString} = require('./browser-buffer-decode');\r\n\r\nmodule.exports = async function* (iterable) {\r\n  // TODO: Remove once node v8 is deprecated\r\n  // Detect and upgrade old streams\r\n  if (iterable.pipe && !iterable[Symbol.asyncIterator]) {\r\n    iterable = iterable.pipe(new PassThrough());\r\n  }\r\n  const saxesParser = new SaxesParser();\r\n  let error;\r\n  saxesParser.on('error', err => {\r\n    error = err;\r\n  });\r\n  let events = [];\r\n  saxesParser.on('opentag', value => events.push({eventType: 'opentag', value}));\r\n  saxesParser.on('text', value => events.push({eventType: 'text', value}));\r\n  saxesParser.on('closetag', value => events.push({eventType: 'closetag', value}));\r\n  for await (const chunk of iterable) {\r\n    saxesParser.write(bufferToString(chunk));\r\n    // saxesParser.write and saxesParser.on() are synchronous,\r\n    // so we can only reach the below line once all events have been emitted\r\n    if (error) throw error;\r\n    // As a performance optimization, we gather all events instead of passing\r\n    // them one by one, which would cause each event to go through the event queue\r\n    yield events;\r\n    events = [];\r\n  }\r\n};\r\n"],"file":"parse-sax.js"}