{"version":3,"sources":["../../../../lib/stream/xlsx/hyperlink-reader.js"],"names":["require","EventEmitter","parseSax","Enums","RelType","HyperlinkReader","workbook","id","iterator","options","fn","hyperlinks","forEach","emitHyperlinks","emit","events","eventType","value","node","name","rId","attributes","Id","Type","Hyperlink","relationship","type","RelationshipType","Styles","target","Target","targetMode","TargetMode","length","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAAuBA,OAAO,CAAC,QAAD,C;IAAvBC,Y,YAAAA,Y;;AACP,IAAMC,QAAQ,GAAGF,OAAO,CAAC,uBAAD,CAAxB;;AAEA,IAAMG,KAAK,GAAGH,OAAO,CAAC,iBAAD,CAArB;;AACA,IAAMI,OAAO,GAAGJ,OAAO,CAAC,qBAAD,CAAvB;;IAEMK,e;;;;;AACJ,iCAA+C;AAAA;;AAAA,QAAlCC,QAAkC,QAAlCA,QAAkC;AAAA,QAAxBC,EAAwB,QAAxBA,EAAwB;AAAA,QAApBC,QAAoB,QAApBA,QAAoB;AAAA,QAAVC,OAAU,QAAVA,OAAU;;AAAA;;AAC7C;AAEA,UAAKH,QAAL,GAAgBA,QAAhB;AACA,UAAKC,EAAL,GAAUA,EAAV;AACA,UAAKC,QAAL,GAAgBA,QAAhB;AACA,UAAKC,OAAL,GAAeA,OAAf;AAN6C;AAO9C;;;;yBAMIC,E,EAAI;AACP,aAAO,KAAKC,UAAL,CAAgBC,OAAhB,CAAwBF,EAAxB,CAAP;AACD;;;;;;;;;;;AAGQF,gBAAAA,Q,GAAqB,I,CAArBA,Q,EAAUC,O,GAAW,I,CAAXA,O;AACbI,gBAAAA,c,GAAiB,K;AACjBF,gBAAAA,U,GAAa,I;8BACTF,OAAO,CAACE,U;gDACT,M,uBAGA,O;;;;AAFHE,gBAAAA,cAAc,GAAG,IAAjB;;;;AAGA,qBAAKF,UAAL,GAAkBA,UAAU,GAAG,EAA/B;;;;;;;sBAMA,CAACE,cAAD,IAAmB,CAACF,U;;;;;AACtB,qBAAKG,IAAL,CAAU,UAAV;;;;;;;;2CAK2BZ,QAAQ,CAACM,QAAD,C;;;;;;;;;;;;;;;;;;;;AAAlBO,gBAAAA,M;wDACkBA,M;;;;;;;;;;;6CAArBC,S,gBAAAA,S,EAAWC,K,gBAAAA,K;;sBACjBD,SAAS,KAAK,S;;;;;AACVE,gBAAAA,I,GAAOD,K;;sBACTC,IAAI,CAACC,IAAL,KAAc,c;;;;;AACVC,gBAAAA,G,GAAMF,IAAI,CAACG,UAAL,CAAgBC,E;8BACpBJ,IAAI,CAACG,UAAL,CAAgBE,I;gDACjBnB,OAAO,CAACoB,S;;;;AAEHC,gBAAAA,Y,GAAe;AACnBC,kBAAAA,IAAI,EAAEvB,KAAK,CAACwB,gBAAN,CAAuBC,MADV;AAEnBR,kBAAAA,GAAG,EAAHA,GAFmB;AAGnBS,kBAAAA,MAAM,EAAEX,IAAI,CAACG,UAAL,CAAgBS,MAHL;AAInBC,kBAAAA,UAAU,EAAEb,IAAI,CAACG,UAAL,CAAgBW;AAJT,iB;;AAMrB,oBAAInB,cAAJ,EAAoB;AAClB,uBAAKC,IAAL,CAAU,WAAV,EAAuBW,YAAvB;AACD,iBAFD,MAEO;AACLd,kBAAAA,UAAU,CAACc,YAAY,CAACL,GAAd,CAAV,GAA+BK,YAA/B;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWf,qBAAKX,IAAL,CAAU,UAAV;;;;;;;AAEA,qBAAKA,IAAL,CAAU,OAAV;;;;;;;;;;;;;;;;;;wBA7DQ;AACV,aAAQ,KAAKH,UAAL,IAAmB,KAAKA,UAAL,CAAgBsB,MAApC,IAA+C,CAAtD;AACD;;;;EAZ2BhC,Y;;AA4E9BiC,MAAM,CAACC,OAAP,GAAiB9B,eAAjB","sourcesContent":["const {EventEmitter} = require('events');\r\nconst parseSax = require('../../utils/parse-sax');\r\n\r\nconst Enums = require('../../doc/enums');\r\nconst RelType = require('../../xlsx/rel-type');\r\n\r\nclass HyperlinkReader extends EventEmitter {\r\n  constructor({workbook, id, iterator, options}) {\r\n    super();\r\n\r\n    this.workbook = workbook;\r\n    this.id = id;\r\n    this.iterator = iterator;\r\n    this.options = options;\r\n  }\r\n\r\n  get count() {\r\n    return (this.hyperlinks && this.hyperlinks.length) || 0;\r\n  }\r\n\r\n  each(fn) {\r\n    return this.hyperlinks.forEach(fn);\r\n  }\r\n\r\n  async read() {\r\n    const {iterator, options} = this;\r\n    let emitHyperlinks = false;\r\n    let hyperlinks = null;\r\n    switch (options.hyperlinks) {\r\n      case 'emit':\r\n        emitHyperlinks = true;\r\n        break;\r\n      case 'cache':\r\n        this.hyperlinks = hyperlinks = {};\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (!emitHyperlinks && !hyperlinks) {\r\n      this.emit('finished');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      for await (const events of parseSax(iterator)) {\r\n        for (const {eventType, value} of events) {\r\n          if (eventType === 'opentag') {\r\n            const node = value;\r\n            if (node.name === 'Relationship') {\r\n              const rId = node.attributes.Id;\r\n              switch (node.attributes.Type) {\r\n                case RelType.Hyperlink:\r\n                  {\r\n                    const relationship = {\r\n                      type: Enums.RelationshipType.Styles,\r\n                      rId,\r\n                      target: node.attributes.Target,\r\n                      targetMode: node.attributes.TargetMode,\r\n                    };\r\n                    if (emitHyperlinks) {\r\n                      this.emit('hyperlink', relationship);\r\n                    } else {\r\n                      hyperlinks[relationship.rId] = relationship;\r\n                    }\r\n                  }\r\n                  break;\r\n\r\n                default:\r\n                  break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.emit('finished');\r\n    } catch (error) {\r\n      this.emit('error', error);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = HyperlinkReader;\r\n"],"file":"hyperlink-reader.js"}