{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/sheet-protection-xform.js"],"names":["_","require","BaseXform","booleanToXml","model","value","undefined","xmlToBoolean","equals","SheetProtectionXform","xmlStream","attributes","sheet","selectLockedCells","selectUnlockedCells","formatCells","formatColumns","formatRows","insertColumns","insertRows","insertHyperlinks","deleteColumns","deleteRows","sort","autoFilter","pivotTables","algorithmName","hashValue","saltValue","spinCount","objects","scenarios","some","leafNode","tag","node","name","parseInt","module","exports"],"mappings":"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","sourcesContent":["const _ = require('../../../utils/under-dash');\r\nconst BaseXform = require('../base-xform');\r\n\r\nfunction booleanToXml(model, value) {\r\n  return model ? value : undefined;\r\n}\r\n\r\nfunction xmlToBoolean(value, equals) {\r\n  return value === equals ? true : undefined;\r\n}\r\n\r\nclass SheetProtectionXform extends BaseXform {\r\n  get tag() {\r\n    return 'sheetProtection';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    if (model) {\r\n      const attributes = {\r\n        sheet: booleanToXml(model.sheet, '1'),\r\n        selectLockedCells: model.selectLockedCells === false ? '1' : undefined,\r\n        selectUnlockedCells: model.selectUnlockedCells === false ? '1' : undefined,\r\n        formatCells: booleanToXml(model.formatCells, '0'),\r\n        formatColumns: booleanToXml(model.formatColumns, '0'),\r\n        formatRows: booleanToXml(model.formatRows, '0'),\r\n        insertColumns: booleanToXml(model.insertColumns, '0'),\r\n        insertRows: booleanToXml(model.insertRows, '0'),\r\n        insertHyperlinks: booleanToXml(model.insertHyperlinks, '0'),\r\n        deleteColumns: booleanToXml(model.deleteColumns, '0'),\r\n        deleteRows: booleanToXml(model.deleteRows, '0'),\r\n        sort: booleanToXml(model.sort, '0'),\r\n        autoFilter: booleanToXml(model.autoFilter, '0'),\r\n        pivotTables: booleanToXml(model.pivotTables, '0'),\r\n      };\r\n      if (model.sheet) {\r\n        attributes.algorithmName = model.algorithmName;\r\n        attributes.hashValue = model.hashValue;\r\n        attributes.saltValue = model.saltValue;\r\n        attributes.spinCount = model.spinCount;\r\n        attributes.objects = booleanToXml(model.objects === false, '1');\r\n        attributes.scenarios = booleanToXml(model.scenarios === false, '1');\r\n      }\r\n      if (_.some(attributes, value => value !== undefined)) {\r\n        xmlStream.leafNode(this.tag, attributes);\r\n      }\r\n    }\r\n  }\r\n\r\n  parseOpen(node) {\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.model = {\r\n          sheet: xmlToBoolean(node.attributes.sheet, '1'),\r\n          objects: node.attributes.objects === '1' ? false : undefined,\r\n          scenarios: node.attributes.scenarios === '1' ? false : undefined,\r\n          selectLockedCells: node.attributes.selectLockedCells === '1' ? false : undefined,\r\n          selectUnlockedCells: node.attributes.selectUnlockedCells === '1' ? false : undefined,\r\n          formatCells: xmlToBoolean(node.attributes.formatCells, '0'),\r\n          formatColumns: xmlToBoolean(node.attributes.formatColumns, '0'),\r\n          formatRows: xmlToBoolean(node.attributes.formatRows, '0'),\r\n          insertColumns: xmlToBoolean(node.attributes.insertColumns, '0'),\r\n          insertRows: xmlToBoolean(node.attributes.insertRows, '0'),\r\n          insertHyperlinks: xmlToBoolean(node.attributes.insertHyperlinks, '0'),\r\n          deleteColumns: xmlToBoolean(node.attributes.deleteColumns, '0'),\r\n          deleteRows: xmlToBoolean(node.attributes.deleteRows, '0'),\r\n          sort: xmlToBoolean(node.attributes.sort, '0'),\r\n          autoFilter: xmlToBoolean(node.attributes.autoFilter, '0'),\r\n          pivotTables: xmlToBoolean(node.attributes.pivotTables, '0'),\r\n        };\r\n        if (node.attributes.algorithmName) {\r\n          this.model.algorithmName = node.attributes.algorithmName;\r\n          this.model.hashValue = node.attributes.hashValue;\r\n          this.model.saltValue = node.attributes.saltValue;\r\n          this.model.spinCount = parseInt(node.attributes.spinCount, 10);\r\n        }\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose() {\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = SheetProtectionXform;\r\n"],"file":"sheet-protection-xform.js"}