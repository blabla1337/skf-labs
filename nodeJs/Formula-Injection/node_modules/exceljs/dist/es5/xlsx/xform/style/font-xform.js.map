{"version":3,"sources":["../../../../../lib/xlsx/xform/style/font-xform.js"],"names":["ColorXform","require","BooleanXform","IntegerXform","StringXform","UnderlineXform","_","BaseXform","FontXform","options","OPTIONS","map","b","prop","xform","tag","attr","i","u","charset","color","condense","extend","family","outline","vertAlign","scheme","shadow","strike","sz","fontNameTag","xmlStream","model","openNode","tagName","each","defn","render","closeNode","node","parser","parseOpen","name","text","parseText","parseClose","item","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst ColorXform = require('./color-xform');\r\nconst BooleanXform = require('../simple/boolean-xform');\r\nconst IntegerXform = require('../simple/integer-xform');\r\nconst StringXform = require('../simple/string-xform');\r\nconst UnderlineXform = require('./underline-xform');\r\n\r\nconst _ = require('../../../utils/under-dash');\r\nconst BaseXform = require('../base-xform');\r\n\r\n// Font encapsulates translation from font model to xlsx\r\nclass FontXform extends BaseXform {\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = options || FontXform.OPTIONS;\r\n\r\n    this.map = {\r\n      b: {prop: 'bold', xform: new BooleanXform({tag: 'b', attr: 'val'})},\r\n      i: {prop: 'italic', xform: new BooleanXform({tag: 'i', attr: 'val'})},\r\n      u: {prop: 'underline', xform: new UnderlineXform()},\r\n      charset: {prop: 'charset', xform: new IntegerXform({tag: 'charset', attr: 'val'})},\r\n      color: {prop: 'color', xform: new ColorXform()},\r\n      condense: {prop: 'condense', xform: new BooleanXform({tag: 'condense', attr: 'val'})},\r\n      extend: {prop: 'extend', xform: new BooleanXform({tag: 'extend', attr: 'val'})},\r\n      family: {prop: 'family', xform: new IntegerXform({tag: 'family', attr: 'val'})},\r\n      outline: {prop: 'outline', xform: new BooleanXform({tag: 'outline', attr: 'val'})},\r\n      vertAlign: {prop: 'vertAlign', xform: new StringXform({tag: 'vertAlign', attr: 'val'})},\r\n      scheme: {prop: 'scheme', xform: new StringXform({tag: 'scheme', attr: 'val'})},\r\n      shadow: {prop: 'shadow', xform: new BooleanXform({tag: 'shadow', attr: 'val'})},\r\n      strike: {prop: 'strike', xform: new BooleanXform({tag: 'strike', attr: 'val'})},\r\n      sz: {prop: 'size', xform: new IntegerXform({tag: 'sz', attr: 'val'})},\r\n    };\r\n    this.map[this.options.fontNameTag] = {\r\n      prop: 'name',\r\n      xform: new StringXform({tag: this.options.fontNameTag, attr: 'val'}),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return this.options.tagName;\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    const {map} = this;\r\n\r\n    xmlStream.openNode(this.options.tagName);\r\n    _.each(this.map, (defn, tag) => {\r\n      map[tag].xform.render(xmlStream, model[defn.prop]);\r\n    });\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    if (this.map[node.name]) {\r\n      this.parser = this.map[node.name].xform;\r\n      return this.parser.parseOpen(node);\r\n    }\r\n    switch (node.name) {\r\n      case this.options.tagName:\r\n        this.model = {};\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser && !this.parser.parseClose(name)) {\r\n      const item = this.map[name];\r\n      if (this.parser.model) {\r\n        this.model[item.prop] = this.parser.model;\r\n      }\r\n      this.parser = undefined;\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.options.tagName:\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nFontXform.OPTIONS = {\r\n  tagName: 'font',\r\n  fontNameTag: 'name',\r\n};\r\n\r\nmodule.exports = FontXform;\r\n"],"file":"font-xform.js"}