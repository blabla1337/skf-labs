{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf-ext/databar-ext-xform.js"],"names":["BaseXform","require","CompositeXform","ColorXform","CfvoExtXform","DatabarExtXform","map","cfvoXform","borderColorXform","negativeBorderColorXform","negativeFillColorXform","axisColorXform","xmlStream","model","openNode","tag","minLength","toIntAttribute","maxLength","border","toBoolAttribute","gradient","negativeBarColorSameAsPositive","negativeBarBorderColorSameAsPositive","axisPosition","toAttribute","direction","cfvo","forEach","render","borderColor","negativeBorderColor","negativeFillColor","axisColor","closeNode","attributes","toIntValue","toBoolValue","toStringValue","name","parser","split","prop","push","rule","module","exports"],"mappings":"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","sourcesContent":["const BaseXform = require('../../base-xform');\r\nconst CompositeXform = require('../../composite-xform');\r\n\r\nconst ColorXform = require('../../style/color-xform');\r\nconst CfvoExtXform = require('./cfvo-ext-xform');\r\n\r\nclass DatabarExtXform extends CompositeXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      'x14:cfvo': (this.cfvoXform = new CfvoExtXform()),\r\n      'x14:borderColor': (this.borderColorXform = new ColorXform('x14:borderColor')),\r\n      'x14:negativeBorderColor': (this.negativeBorderColorXform = new ColorXform(\r\n        'x14:negativeBorderColor'\r\n      )),\r\n      'x14:negativeFillColor': (this.negativeFillColorXform = new ColorXform(\r\n        'x14:negativeFillColor'\r\n      )),\r\n      'x14:axisColor': (this.axisColorXform = new ColorXform('x14:axisColor')),\r\n    };\r\n  }\r\n\r\n  static isExt(rule) {\r\n    // not all databars need ext\r\n    // TODO: refine this\r\n    return !rule.gradient;\r\n  }\r\n\r\n  get tag() {\r\n    return 'x14:dataBar';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {\r\n      minLength: BaseXform.toIntAttribute(model.minLength, 0, true),\r\n      maxLength: BaseXform.toIntAttribute(model.maxLength, 100, true),\r\n      border: BaseXform.toBoolAttribute(model.border, false),\r\n      gradient: BaseXform.toBoolAttribute(model.gradient, true),\r\n      negativeBarColorSameAsPositive: BaseXform.toBoolAttribute(\r\n        model.negativeBarColorSameAsPositive,\r\n        true\r\n      ),\r\n      negativeBarBorderColorSameAsPositive: BaseXform.toBoolAttribute(\r\n        model.negativeBarBorderColorSameAsPositive,\r\n        true\r\n      ),\r\n      axisPosition: BaseXform.toAttribute(model.axisPosition, 'auto'),\r\n      direction: BaseXform.toAttribute(model.direction, 'leftToRight'),\r\n    });\r\n\r\n    model.cfvo.forEach(cfvo => {\r\n      this.cfvoXform.render(xmlStream, cfvo);\r\n    });\r\n\r\n    this.borderColorXform.render(xmlStream, model.borderColor);\r\n    this.negativeBorderColorXform.render(xmlStream, model.negativeBorderColor);\r\n    this.negativeFillColorXform.render(xmlStream, model.negativeFillColor);\r\n    this.axisColorXform.render(xmlStream, model.axisColor);\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  createNewModel({attributes}) {\r\n    return {\r\n      cfvo: [],\r\n      minLength: BaseXform.toIntValue(attributes.minLength, 0),\r\n      maxLength: BaseXform.toIntValue(attributes.maxLength, 100),\r\n      border: BaseXform.toBoolValue(attributes.border, false),\r\n      gradient: BaseXform.toBoolValue(attributes.gradient, true),\r\n      negativeBarColorSameAsPositive: BaseXform.toBoolValue(\r\n        attributes.negativeBarColorSameAsPositive,\r\n        true\r\n      ),\r\n      negativeBarBorderColorSameAsPositive: BaseXform.toBoolValue(\r\n        attributes.negativeBarBorderColorSameAsPositive,\r\n        true\r\n      ),\r\n      axisPosition: BaseXform.toStringValue(attributes.axisPosition, 'auto'),\r\n      direction: BaseXform.toStringValue(attributes.direction, 'leftToRight'),\r\n    };\r\n  }\r\n\r\n  onParserClose(name, parser) {\r\n    const [, prop] = name.split(':');\r\n    switch (prop) {\r\n      case 'cfvo':\r\n        this.model.cfvo.push(parser.model);\r\n        break;\r\n\r\n      default:\r\n        this.model[prop] = parser.model;\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = DatabarExtXform;\r\n"],"file":"databar-ext-xform.js"}