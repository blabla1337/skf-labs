{"version":3,"sources":["../../../../lib/xlsx/xform/composite-xform.js"],"names":["BaseXform","require","CompositeXform","node","parser","map","name","parseOpen","tag","model","createNewModel","text","parseText","parseClose","onParserClose","undefined","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;AAEA;;AACA;AAEA;AACA;;;IACMC,c;;;;;;;;;;;;;mCACWC,I,EAAM;AACnB,aAAO,EAAP;AACD;;;8BAESA,I,EAAM;AACd;AACA,WAAKC,MAAL,GAAc,KAAKA,MAAL,IAAe,KAAKC,GAAL,CAASF,IAAI,CAACG,IAAd,CAA7B;;AACA,UAAI,KAAKF,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYG,SAAZ,CAAsBJ,IAAtB;AACA,eAAO,IAAP;AACD;;AAED,UAAIA,IAAI,CAACG,IAAL,KAAc,KAAKE,GAAvB,EAA4B;AAC1B,aAAKC,KAAL,GAAa,KAAKC,cAAL,CAAoBP,IAApB,CAAb;AACA,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD;;;8BAESQ,I,EAAM;AACd;AACA,UAAI,KAAKP,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYQ,SAAZ,CAAsBD,IAAtB;AACD;AACF;;;kCAEaL,I,EAAMF,M,EAAQ;AAC1B;AACA;AACA,WAAKK,KAAL,CAAWH,IAAX,IAAmBF,MAAM,CAACK,KAA1B;AACD;;;+BAEUH,I,EAAM;AACf;AACA,UAAI,KAAKF,MAAT,EAAiB;AACf,YAAI,CAAC,KAAKA,MAAL,CAAYS,UAAZ,CAAuBP,IAAvB,CAAL,EAAmC;AACjC,eAAKQ,aAAL,CAAmBR,IAAnB,EAAyB,KAAKF,MAA9B;AACA,eAAKA,MAAL,GAAcW,SAAd;AACD;;AACD,eAAO,IAAP;AACD;;AAED,aAAOT,IAAI,KAAK,KAAKE,GAArB;AACD;;;;EA7C0BR,S;;AAgD7BgB,MAAM,CAACC,OAAP,GAAiBf,cAAjB","sourcesContent":["const BaseXform = require('./base-xform');\r\n\r\n/* 'virtual' methods used as a form of documentation */\r\n/* eslint-disable class-methods-use-this */\r\n\r\n// base class for xforms that are composed of other xforms\r\n// offers some default implementations\r\nclass CompositeXform extends BaseXform {\r\n  createNewModel(node) {\r\n    return {};\r\n  }\r\n\r\n  parseOpen(node) {\r\n    // Typical pattern for composite xform\r\n    this.parser = this.parser || this.map[node.name];\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n\r\n    if (node.name === this.tag) {\r\n      this.model = this.createNewModel(node);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  parseText(text) {\r\n    // Default implementation. Send text to child parser\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  onParserClose(name, parser) {\r\n    // parseClose has seen a child parser close\r\n    // now need to incorporate into this.model somehow\r\n    this.model[name] = parser.model;\r\n  }\r\n\r\n  parseClose(name) {\r\n    // Default implementation\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.onParserClose(name, this.parser);\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    return name !== this.tag;\r\n  }\r\n}\r\n\r\nmodule.exports = CompositeXform;\r\n"],"file":"composite-xform.js"}