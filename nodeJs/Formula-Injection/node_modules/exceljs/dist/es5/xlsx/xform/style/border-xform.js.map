{"version":3,"sources":["../../../../../lib/xlsx/xform/style/border-xform.js"],"names":["BaseXform","require","ColorXform","EdgeXform","name","map","color","xmlStream","model","defaultColor","openNode","style","addAttribute","render","closeNode","node","parser","parseOpen","attributes","undefined","text","parseText","parseClose","value","validStyleValues","reduce","p","v","BorderXform","top","left","bottom","right","diagonal","up","down","add","edgeModel","edgeXform","reset","diagonalUp","diagonalDown","key","extensions","Object","assign","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable max-classes-per-file */\r\nconst BaseXform = require('../base-xform');\r\n\r\nconst ColorXform = require('./color-xform');\r\n\r\nclass EdgeXform extends BaseXform {\r\n  constructor(name) {\r\n    super();\r\n\r\n    this.name = name;\r\n    this.map = {\r\n      color: new ColorXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return this.name;\r\n  }\r\n\r\n  render(xmlStream, model, defaultColor) {\r\n    const color = (model && model.color) || defaultColor || this.defaultColor;\r\n    xmlStream.openNode(this.name);\r\n    if (model && model.style) {\r\n      xmlStream.addAttribute('style', model.style);\r\n      if (color) {\r\n        this.map.color.render(xmlStream, color);\r\n      }\r\n    }\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case this.name: {\r\n        const {style} = node.attributes;\r\n        if (style) {\r\n          this.model = {\r\n            style,\r\n          };\r\n        } else {\r\n          this.model = undefined;\r\n        }\r\n        return true;\r\n      }\r\n      case 'color':\r\n        this.parser = this.map.color;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    if (name === this.name) {\r\n      if (this.map.color.model) {\r\n        if (!this.model) {\r\n          this.model = {};\r\n        }\r\n        this.model.color = this.map.color.model;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  validStyle(value) {\r\n    return EdgeXform.validStyleValues[value];\r\n  }\r\n}\r\n\r\nEdgeXform.validStyleValues = [\r\n  'thin',\r\n  'dotted',\r\n  'dashDot',\r\n  'hair',\r\n  'dashDotDot',\r\n  'slantDashDot',\r\n  'mediumDashed',\r\n  'mediumDashDotDot',\r\n  'mediumDashDot',\r\n  'medium',\r\n  'double',\r\n  'thick',\r\n].reduce((p, v) => {\r\n  p[v] = true;\r\n  return p;\r\n}, {});\r\n\r\n// Border encapsulates translation from border model to/from xlsx\r\nclass BorderXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      top: new EdgeXform('top'),\r\n      left: new EdgeXform('left'),\r\n      bottom: new EdgeXform('bottom'),\r\n      right: new EdgeXform('right'),\r\n      diagonal: new EdgeXform('diagonal'),\r\n    };\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    const {color} = model;\r\n    xmlStream.openNode('border');\r\n    if (model.diagonal && model.diagonal.style) {\r\n      if (model.diagonal.up) {\r\n        xmlStream.addAttribute('diagonalUp', '1');\r\n      }\r\n      if (model.diagonal.down) {\r\n        xmlStream.addAttribute('diagonalDown', '1');\r\n      }\r\n    }\r\n    function add(edgeModel, edgeXform) {\r\n      if (edgeModel && !edgeModel.color && model.color) {\r\n        // don't mess with incoming models\r\n        edgeModel = {\r\n          ...edgeModel,\r\n          color: model.color,\r\n        };\r\n      }\r\n      edgeXform.render(xmlStream, edgeModel, color);\r\n    }\r\n    add(model.left, this.map.left);\r\n    add(model.right, this.map.right);\r\n    add(model.top, this.map.top);\r\n    add(model.bottom, this.map.bottom);\r\n    add(model.diagonal, this.map.diagonal);\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'border':\r\n        this.reset();\r\n        this.diagonalUp = !!node.attributes.diagonalUp;\r\n        this.diagonalDown = !!node.attributes.diagonalDown;\r\n        return true;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    if (name === 'border') {\r\n      const model = (this.model = {});\r\n      const add = function(key, edgeModel, extensions) {\r\n        if (edgeModel) {\r\n          if (extensions) {\r\n            Object.assign(edgeModel, extensions);\r\n          }\r\n          model[key] = edgeModel;\r\n        }\r\n      };\r\n      add('left', this.map.left.model);\r\n      add('right', this.map.right.model);\r\n      add('top', this.map.top.model);\r\n      add('bottom', this.map.bottom.model);\r\n      add('diagonal', this.map.diagonal.model, {up: this.diagonalUp, down: this.diagonalDown});\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = BorderXform;\r\n"],"file":"border-xform.js"}