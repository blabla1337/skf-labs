{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/merges.js"],"names":["_","require","Range","colCache","Enums","Merges","merges","merge","master","expandToAddress","address","range","mergeCells","rows","each","dimensions","decode","i","top","bottom","row","j","left","right","cell","cells","type","ValueType","Null","encodeAddress","Merge","tl","hash","map","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,CAAC,GAAGC,OAAO,CAAC,2BAAD,CAAjB;;AAEA,IAAMC,KAAK,GAAGD,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,oBAAD,CAArB;;IAEMI,M;AACJ,oBAAc;AAAA;;AACZ;AACA,SAAKC,MAAL,GAAc,EAAd;AACD;;;;wBAEGC,K,EAAO;AACT;AACA,UAAI,KAAKD,MAAL,CAAYC,KAAK,CAACC,MAAlB,CAAJ,EAA+B;AAC7B,aAAKF,MAAL,CAAYC,KAAK,CAACC,MAAlB,EAA0BC,eAA1B,CAA0CF,KAAK,CAACG,OAAhD;AACD,OAFD,MAEO;AACL,YAAMC,KAAK,aAAMJ,KAAK,CAACC,MAAZ,cAAsBD,KAAK,CAACG,OAA5B,CAAX;AACA,aAAKJ,MAAL,CAAYC,KAAK,CAACC,MAAlB,IAA4B,IAAIN,KAAJ,CAAUS,KAAV,CAA5B;AACD;AACF;;;8BAMSC,U,EAAYC,I,EAAM;AAC1B;AACAb,MAAAA,CAAC,CAACc,IAAF,CAAOF,UAAP,EAAmB,UAAAL,KAAK,EAAI;AAC1B,YAAMQ,UAAU,GAAGZ,QAAQ,CAACa,MAAT,CAAgBT,KAAhB,CAAnB;;AACA,aAAK,IAAIU,CAAC,GAAGF,UAAU,CAACG,GAAxB,EAA6BD,CAAC,IAAIF,UAAU,CAACI,MAA7C,EAAqDF,CAAC,EAAtD,EAA0D;AACxD,cAAMG,GAAG,GAAGP,IAAI,CAACI,CAAC,GAAG,CAAL,CAAhB;;AACA,eAAK,IAAII,CAAC,GAAGN,UAAU,CAACO,IAAxB,EAA8BD,CAAC,IAAIN,UAAU,CAACQ,KAA9C,EAAqDF,CAAC,EAAtD,EAA0D;AACxD,gBAAMG,IAAI,GAAGJ,GAAG,CAACK,KAAJ,CAAUJ,CAAC,GAAG,CAAd,CAAb;;AACA,gBAAI,CAACG,IAAL,EAAW;AACT;AACAJ,cAAAA,GAAG,CAACK,KAAJ,CAAUJ,CAAV,IAAe;AACbK,gBAAAA,IAAI,EAAEtB,KAAK,CAACuB,SAAN,CAAgBC,IADT;AAEblB,gBAAAA,OAAO,EAAEP,QAAQ,CAAC0B,aAAT,CAAuBZ,CAAvB,EAA0BI,CAA1B;AAFI,eAAf;AAID,aAND,MAMO,IAAIG,IAAI,CAACE,IAAL,KAActB,KAAK,CAACuB,SAAN,CAAgBG,KAAlC,EAAyC;AAC9CN,cAAAA,IAAI,CAAChB,MAAL,GAAcO,UAAU,CAACgB,EAAzB;AACD;AACF;AACF;AACF,OAjBD;AAkBD;;;qCAEgBrB,O,EAAS;AACxB;AACA,UAAMC,KAAK,GAAG,KAAKqB,IAAL,CAAUtB,OAAV,CAAd;AACA,aAAOC,KAAK,IAAIA,KAAK,CAACoB,EAAtB;AACD;;;wBA9BgB;AACf,aAAO/B,CAAC,CAACiC,GAAF,CAAM,KAAK3B,MAAX,EAAmB,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACI,KAAV;AAAA,OAAxB,CAAP;AACD;;;;;;AA+BHuB,MAAM,CAACC,OAAP,GAAiB9B,MAAjB","sourcesContent":["const _ = require('../../../utils/under-dash');\r\n\r\nconst Range = require('../../../doc/range');\r\nconst colCache = require('../../../utils/col-cache');\r\nconst Enums = require('../../../doc/enums');\r\n\r\nclass Merges {\r\n  constructor() {\r\n    // optional mergeCells is array of ranges (like the xml)\r\n    this.merges = {};\r\n  }\r\n\r\n  add(merge) {\r\n    // merge is {address, master}\r\n    if (this.merges[merge.master]) {\r\n      this.merges[merge.master].expandToAddress(merge.address);\r\n    } else {\r\n      const range = `${merge.master}:${merge.address}`;\r\n      this.merges[merge.master] = new Range(range);\r\n    }\r\n  }\r\n\r\n  get mergeCells() {\r\n    return _.map(this.merges, merge => merge.range);\r\n  }\r\n\r\n  reconcile(mergeCells, rows) {\r\n    // reconcile merge list with merge cells\r\n    _.each(mergeCells, merge => {\r\n      const dimensions = colCache.decode(merge);\r\n      for (let i = dimensions.top; i <= dimensions.bottom; i++) {\r\n        const row = rows[i - 1];\r\n        for (let j = dimensions.left; j <= dimensions.right; j++) {\r\n          const cell = row.cells[j - 1];\r\n          if (!cell) {\r\n            // nulls are not included in document - so if master cell has no value - add a null one here\r\n            row.cells[j] = {\r\n              type: Enums.ValueType.Null,\r\n              address: colCache.encodeAddress(i, j),\r\n            };\r\n          } else if (cell.type === Enums.ValueType.Merge) {\r\n            cell.master = dimensions.tl;\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  getMasterAddress(address) {\r\n    // if address has been merged, return its master's address. Assumes reconcile has been called\r\n    const range = this.hash[address];\r\n    return range && range.tl;\r\n  }\r\n}\r\n\r\nmodule.exports = Merges;\r\n"],"file":"merges.js"}