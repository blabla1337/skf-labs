{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/phonetic-text-xform.js"],"names":["TextXform","require","RichTextXform","BaseXform","PhoneticTextXform","map","r","t","xmlStream","model","openNode","tag","sb","eb","hasOwnProperty","richText","forEach","text","render","closeNode","node","name","parser","parseOpen","parseInt","attributes","parseText","parseClose","rt","push","undefined","module","exports"],"mappings":"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","sourcesContent":["const TextXform = require('./text-xform');\r\nconst RichTextXform = require('./rich-text-xform');\r\n\r\nconst BaseXform = require('../base-xform');\r\n\r\n// <rPh sb=\"0\" eb=\"1\">\r\n//   <t>(its pronounciation in KATAKANA)</t>\r\n// </rPh>\r\n\r\nclass PhoneticTextXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      r: new RichTextXform(),\r\n      t: new TextXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'rPh';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {\r\n      sb: model.sb || 0,\r\n      eb: model.eb || 0,\r\n    });\r\n    if (model && model.hasOwnProperty('richText') && model.richText) {\r\n      const {r} = this.map;\r\n      model.richText.forEach(text => {\r\n        r.render(xmlStream, text);\r\n      });\r\n    } else if (model) {\r\n      this.map.t.render(xmlStream, model.text);\r\n    }\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    const {name} = node;\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    if (name === this.tag) {\r\n      this.model = {\r\n        sb: parseInt(node.attributes.sb, 10),\r\n        eb: parseInt(node.attributes.eb, 10),\r\n      };\r\n      return true;\r\n    }\r\n    this.parser = this.map[name];\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        switch (name) {\r\n          case 'r': {\r\n            let rt = this.model.richText;\r\n            if (!rt) {\r\n              rt = this.model.richText = [];\r\n            }\r\n            rt.push(this.parser.model);\r\n            break;\r\n          }\r\n          case 't':\r\n            this.model.text = this.parser.model;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.tag:\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = PhoneticTextXform;\r\n"],"file":"phonetic-text-xform.js"}