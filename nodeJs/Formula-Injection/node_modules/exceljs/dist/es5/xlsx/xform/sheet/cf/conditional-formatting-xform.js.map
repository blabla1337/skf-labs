{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf/conditional-formatting-xform.js"],"names":["CompositeXform","require","CfRuleXform","ConditionalFormattingXform","map","cfRule","xmlStream","model","rules","some","isPrimitive","openNode","tag","sqref","ref","forEach","rule","render","closeNode","attributes","name","parser","push","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,cAAc,GAAGC,OAAO,CAAC,uBAAD,CAA9B;;AAEA,IAAMC,WAAW,GAAGD,OAAO,CAAC,iBAAD,CAA3B;;IAEME,0B;;;;;AACJ,wCAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,GAAL,GAAW;AACTC,MAAAA,MAAM,EAAE,IAAIH,WAAJ;AADC,KAAX;AAHY;AAMb;;;;2BAMMI,S,EAAWC,K,EAAO;AAAA;;AACvB;AACA,UAAI,CAACA,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAiBP,WAAW,CAACQ,WAA7B,CAAL,EAAgD;AAC9C;AACD;;AAEDJ,MAAAA,SAAS,CAACK,QAAV,CAAmB,KAAKC,GAAxB,EAA6B;AAACC,QAAAA,KAAK,EAAEN,KAAK,CAACO;AAAd,OAA7B;AAEAP,MAAAA,KAAK,CAACC,KAAN,CAAYO,OAAZ,CAAoB,UAAAC,IAAI,EAAI;AAC1B,YAAId,WAAW,CAACQ,WAAZ,CAAwBM,IAAxB,CAAJ,EAAmC;AACjCA,UAAAA,IAAI,CAACF,GAAL,GAAWP,KAAK,CAACO,GAAjB;;AACA,UAAA,MAAI,CAACV,GAAL,CAASC,MAAT,CAAgBY,MAAhB,CAAuBX,SAAvB,EAAkCU,IAAlC;AACD;AACF,OALD;AAOAV,MAAAA,SAAS,CAACY,SAAV;AACD;;;yCAE4B;AAAA,UAAbC,UAAa,QAAbA,UAAa;AAC3B,aAAO;AACLL,QAAAA,GAAG,EAAEK,UAAU,CAACN,KADX;AAELL,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;;;kCAEaY,I,EAAMC,M,EAAQ;AAC1B,WAAKd,KAAL,CAAWC,KAAX,CAAiBc,IAAjB,CAAsBD,MAAM,CAACd,KAA7B;AACD;;;wBA/BS;AACR,aAAO,uBAAP;AACD;;;;EAXsCP,c;;AA2CzCuB,MAAM,CAACC,OAAP,GAAiBrB,0BAAjB","sourcesContent":["const CompositeXform = require('../../composite-xform');\r\n\r\nconst CfRuleXform = require('./cf-rule-xform');\r\n\r\nclass ConditionalFormattingXform extends CompositeXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      cfRule: new CfRuleXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'conditionalFormatting';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    // if there are no primitive rules, exit now\r\n    if (!model.rules.some(CfRuleXform.isPrimitive)) {\r\n      return;\r\n    }\r\n\r\n    xmlStream.openNode(this.tag, {sqref: model.ref});\r\n\r\n    model.rules.forEach(rule => {\r\n      if (CfRuleXform.isPrimitive(rule)) {\r\n        rule.ref = model.ref;\r\n        this.map.cfRule.render(xmlStream, rule);\r\n      }\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  createNewModel({attributes}) {\r\n    return {\r\n      ref: attributes.sqref,\r\n      rules: [],\r\n    };\r\n  }\r\n\r\n  onParserClose(name, parser) {\r\n    this.model.rules.push(parser.model);\r\n  }\r\n}\r\n\r\nmodule.exports = ConditionalFormattingXform;\r\n"],"file":"conditional-formatting-xform.js"}