{"version":3,"sources":["../../../../../lib/xlsx/xform/book/defined-name-xform.js"],"names":["BaseXform","require","colCache","DefinedNamesXform","xmlStream","model","openNode","name","localSheetId","writeText","ranges","join","closeNode","node","_parsedName","attributes","_parsedLocalSheetId","_parsedText","text","push","extractRanges","undefined","parseInt","isValidRange","range","decodeEx","err","parsedText","quotesOpened","last","split","forEach","item","quotes","match","length","quotesEven","module","exports"],"mappings":"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","sourcesContent":["const BaseXform = require('../base-xform');\r\nconst colCache = require('../../../utils/col-cache');\r\n\r\nclass DefinedNamesXform extends BaseXform {\r\n  render(xmlStream, model) {\r\n    // <definedNames>\r\n    //   <definedName name=\"name\">name.ranges.join(',')</definedName>\r\n    //   <definedName name=\"_xlnm.Print_Area\" localSheetId=\"0\">name.ranges.join(',')</definedName>\r\n    // </definedNames>\r\n    xmlStream.openNode('definedName', {\r\n      name: model.name,\r\n      localSheetId: model.localSheetId,\r\n    });\r\n    xmlStream.writeText(model.ranges.join(','));\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    switch (node.name) {\r\n      case 'definedName':\r\n        this._parsedName = node.attributes.name;\r\n        this._parsedLocalSheetId = node.attributes.localSheetId;\r\n        this._parsedText = [];\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    this._parsedText.push(text);\r\n  }\r\n\r\n  parseClose() {\r\n    this.model = {\r\n      name: this._parsedName,\r\n      ranges: extractRanges(this._parsedText.join('')),\r\n    };\r\n    if (this._parsedLocalSheetId !== undefined) {\r\n      this.model.localSheetId = parseInt(this._parsedLocalSheetId, 10);\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction isValidRange(range) {\r\n  try {\r\n    colCache.decodeEx(range);\r\n    return true;\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction extractRanges(parsedText) {\r\n  const ranges = [];\r\n  let quotesOpened = false;\r\n  let last = '';\r\n  parsedText.split(',').forEach(item => {\r\n    if (!item) {\r\n      return;\r\n    }\r\n    const quotes = (item.match(/'/g) || []).length;\r\n\r\n    if (!quotes) {\r\n      if (quotesOpened) {\r\n        last += `${item},`;\r\n      } else if (isValidRange(item)) {\r\n        ranges.push(item);\r\n      }\r\n      return;\r\n    }\r\n    const quotesEven = quotes % 2 === 0;\r\n\r\n    if (!quotesOpened && quotesEven && isValidRange(item)) {\r\n      ranges.push(item);\r\n    } else if (quotesOpened && !quotesEven) {\r\n      quotesOpened = false;\r\n      if (isValidRange(last + item)) {\r\n        ranges.push(last + item);\r\n      }\r\n      last = '';\r\n    } else {\r\n      quotesOpened = true;\r\n      last += `${item},`;\r\n    }\r\n  });\r\n  return ranges;\r\n}\r\n\r\nmodule.exports = DefinedNamesXform;\r\n"],"file":"defined-name-xform.js"}