{"version":3,"sources":["../../../../../lib/xlsx/xform/table/auto-filter-xform.js"],"names":["BaseXform","require","FilterColumnXform","AutoFilterXform","map","filterColumn","model","columns","forEach","column","index","prepare","xmlStream","openNode","tag","ref","autoFilterRef","render","closeNode","node","parser","parseOpen","name","attributes","Error","JSON","stringify","text","parseText","parseClose","push","undefined","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,uBAAD,CAAjC;;IAEME,e;;;;;AACJ,6BAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,GAAL,GAAW;AACTC,MAAAA,YAAY,EAAE,IAAIH,iBAAJ;AADL,KAAX;AAHY;AAMb;;;;4BAMOI,K,EAAO;AAAA;;AACbA,MAAAA,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,UAACC,MAAD,EAASC,KAAT,EAAmB;AACvC,QAAA,MAAI,CAACN,GAAL,CAASC,YAAT,CAAsBM,OAAtB,CAA8BF,MAA9B,EAAsC;AAACC,UAAAA,KAAK,EAALA;AAAD,SAAtC;AACD,OAFD;AAGD;;;2BAEME,S,EAAWN,K,EAAO;AAAA;;AACvBM,MAAAA,SAAS,CAACC,QAAV,CAAmB,KAAKC,GAAxB,EAA6B;AAACC,QAAAA,GAAG,EAAET,KAAK,CAACU;AAAZ,OAA7B;AAEAV,MAAAA,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,UAAAC,MAAM,EAAI;AAC9B,QAAA,MAAI,CAACL,GAAL,CAASC,YAAT,CAAsBY,MAAtB,CAA6BL,SAA7B,EAAwCH,MAAxC;AACD,OAFD;AAIAG,MAAAA,SAAS,CAACM,SAAV;AACA,aAAO,IAAP;AACD;;;8BAESC,I,EAAM;AACd,UAAI,KAAKC,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYC,SAAZ,CAAsBF,IAAtB;AACA,eAAO,IAAP;AACD;;AACD,cAAQA,IAAI,CAACG,IAAb;AACE,aAAK,KAAKR,GAAV;AACE,eAAKR,KAAL,GAAa;AACXU,YAAAA,aAAa,EAAEG,IAAI,CAACI,UAAL,CAAgBR,GADpB;AAEXR,YAAAA,OAAO,EAAE;AAFE,WAAb;AAIA,iBAAO,IAAP;;AAEF;AACE,eAAKa,MAAL,GAAc,KAAKhB,GAAL,CAASe,IAAI,CAACG,IAAd,CAAd;;AACA,cAAI,KAAKF,MAAT,EAAiB;AACf,iBAAKC,SAAL,CAAeF,IAAf;AACA,mBAAO,IAAP;AACD;;AACD,gBAAM,IAAIK,KAAJ,6CAA+CC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAA/C,EAAN;AAdJ;AAgBD;;;8BAESQ,I,EAAM;AACd,UAAI,KAAKP,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYQ,SAAZ,CAAsBD,IAAtB;AACD;AACF;;;+BAEUL,I,EAAM;AACf,UAAI,KAAKF,MAAT,EAAiB;AACf,YAAI,CAAC,KAAKA,MAAL,CAAYS,UAAZ,CAAuBP,IAAvB,CAAL,EAAmC;AACjC,eAAKhB,KAAL,CAAWC,OAAX,CAAmBuB,IAAnB,CAAwB,KAAKV,MAAL,CAAYd,KAApC;AACA,eAAKc,MAAL,GAAcW,SAAd;AACD;;AACD,eAAO,IAAP;AACD;;AACD,cAAQT,IAAR;AACE,aAAK,KAAKR,GAAV;AACE,iBAAO,KAAP;;AACF;AACE,gBAAM,IAAIU,KAAJ,8CAAgDF,IAAhD,EAAN;AAJJ;AAMD;;;wBAhES;AACR,aAAO,YAAP;AACD;;;;EAX2BtB,S;;AA4E9BgC,MAAM,CAACC,OAAP,GAAiB9B,eAAjB","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nconst FilterColumnXform = require('./filter-column-xform');\r\n\r\nclass AutoFilterXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      filterColumn: new FilterColumnXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'autoFilter';\r\n  }\r\n\r\n  prepare(model) {\r\n    model.columns.forEach((column, index) => {\r\n      this.map.filterColumn.prepare(column, {index});\r\n    });\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {ref: model.autoFilterRef});\r\n\r\n    model.columns.forEach(column => {\r\n      this.map.filterColumn.render(xmlStream, column);\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n    return true;\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.model = {\r\n          autoFilterRef: node.attributes.ref,\r\n          columns: [],\r\n        };\r\n        return true;\r\n\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parseOpen(node);\r\n          return true;\r\n        }\r\n        throw new Error(`Unexpected xml node in parseOpen: ${JSON.stringify(node)}`);\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.columns.push(this.parser.model);\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.tag:\r\n        return false;\r\n      default:\r\n        throw new Error(`Unexpected xml node in parseClose: ${name}`);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = AutoFilterXform;\r\n"],"file":"auto-filter-xform.js"}