{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/cell-xform.js"],"names":["utils","require","BaseXform","Range","Enums","RichTextXform","getValueType","v","undefined","ValueType","Null","String","Number","Boolean","Date","text","hyperlink","Hyperlink","formula","Formula","error","Error","getEffectiveCellType","cell","type","result","CellXform","richTextXForm","model","options","styleId","styles","addStyleModel","style","comment","comments","push","ref","address","RichText","sharedStrings","ssId","add","value","date1904","hyperlinks","target","tooltip","Merge","merges","shareType","si","siFormulae","formulae","sharedFormula","master","range","expandToAddress","xmlStream","attrs","t","leafNode","addAttribute","dateToExcel","openNode","richText","forEach","render","closeNode","renderFormula","node","parser","parseOpen","name","attributes","r","s","parseInt","currentNode","parseText","xmlDecode","parseFloat","parseClose","getStyleModel","getString","isDateFmt","numFmt","excelToDate","hyperlinkMap","commentsMap","module","exports"],"mappings":"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","sourcesContent":["const utils = require('../../../utils/utils');\r\nconst BaseXform = require('../base-xform');\r\nconst Range = require('../../../doc/range');\r\nconst Enums = require('../../../doc/enums');\r\n\r\nconst RichTextXform = require('../strings/rich-text-xform');\r\n\r\nfunction getValueType(v) {\r\n  if (v === null || v === undefined) {\r\n    return Enums.ValueType.Null;\r\n  }\r\n  if (v instanceof String || typeof v === 'string') {\r\n    return Enums.ValueType.String;\r\n  }\r\n  if (typeof v === 'number') {\r\n    return Enums.ValueType.Number;\r\n  }\r\n  if (typeof v === 'boolean') {\r\n    return Enums.ValueType.Boolean;\r\n  }\r\n  if (v instanceof Date) {\r\n    return Enums.ValueType.Date;\r\n  }\r\n  if (v.text && v.hyperlink) {\r\n    return Enums.ValueType.Hyperlink;\r\n  }\r\n  if (v.formula) {\r\n    return Enums.ValueType.Formula;\r\n  }\r\n  if (v.error) {\r\n    return Enums.ValueType.Error;\r\n  }\r\n  throw new Error('I could not understand type of value');\r\n}\r\n\r\nfunction getEffectiveCellType(cell) {\r\n  switch (cell.type) {\r\n    case Enums.ValueType.Formula:\r\n      return getValueType(cell.result);\r\n    default:\r\n      return cell.type;\r\n  }\r\n}\r\n\r\nclass CellXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.richTextXForm = new RichTextXform();\r\n  }\r\n\r\n  get tag() {\r\n    return 'c';\r\n  }\r\n\r\n  prepare(model, options) {\r\n    const styleId = options.styles.addStyleModel(model.style || {}, getEffectiveCellType(model));\r\n    if (styleId) {\r\n      model.styleId = styleId;\r\n    }\r\n\r\n    if (model.comment) {\r\n      options.comments.push({...model.comment, ref: model.address});\r\n    }\r\n\r\n    switch (model.type) {\r\n      case Enums.ValueType.String:\r\n      case Enums.ValueType.RichText:\r\n        if (options.sharedStrings) {\r\n          model.ssId = options.sharedStrings.add(model.value);\r\n        }\r\n        break;\r\n\r\n      case Enums.ValueType.Date:\r\n        if (options.date1904) {\r\n          model.date1904 = true;\r\n        }\r\n        break;\r\n\r\n      case Enums.ValueType.Hyperlink:\r\n        if (options.sharedStrings && model.text !== undefined && model.text !== null) {\r\n          model.ssId = options.sharedStrings.add(model.text);\r\n        }\r\n        options.hyperlinks.push({\r\n          address: model.address,\r\n          target: model.hyperlink,\r\n          tooltip: model.tooltip,\r\n        });\r\n        break;\r\n\r\n      case Enums.ValueType.Merge:\r\n        options.merges.add(model);\r\n        break;\r\n\r\n      case Enums.ValueType.Formula:\r\n        if (options.date1904) {\r\n          // in case valueType is date\r\n          model.date1904 = true;\r\n        }\r\n\r\n        if (model.shareType === 'shared') {\r\n          model.si = options.siFormulae++;\r\n        }\r\n\r\n        if (model.formula) {\r\n          options.formulae[model.address] = model;\r\n        } else if (model.sharedFormula) {\r\n          const master = options.formulae[model.sharedFormula];\r\n          if (!master) {\r\n            throw new Error(\r\n              `Shared Formula master must exist above and or left of clone for cell ${model.address}`\r\n            );\r\n          }\r\n          if (master.si === undefined) {\r\n            master.shareType = 'shared';\r\n            master.si = options.siFormulae++;\r\n            master.range = new Range(master.address, model.address);\r\n          } else if (master.range) {\r\n            master.range.expandToAddress(model.address);\r\n          }\r\n          model.si = master.si;\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  renderFormula(xmlStream, model) {\r\n    let attrs = null;\r\n    switch (model.shareType) {\r\n      case 'shared':\r\n        attrs = {\r\n          t: 'shared',\r\n          ref: model.ref || model.range.range,\r\n          si: model.si,\r\n        };\r\n        break;\r\n\r\n      case 'array':\r\n        attrs = {\r\n          t: 'array',\r\n          ref: model.ref,\r\n        };\r\n        break;\r\n\r\n      default:\r\n        if (model.si !== undefined) {\r\n          attrs = {\r\n            t: 'shared',\r\n            si: model.si,\r\n          };\r\n        }\r\n        break;\r\n    }\r\n\r\n    switch (getValueType(model.result)) {\r\n      case Enums.ValueType.Null: // ?\r\n        xmlStream.leafNode('f', attrs, model.formula);\r\n        break;\r\n\r\n      case Enums.ValueType.String:\r\n        // oddly, formula results don't ever use shared strings\r\n        xmlStream.addAttribute('t', 'str');\r\n        xmlStream.leafNode('f', attrs, model.formula);\r\n        xmlStream.leafNode('v', null, model.result);\r\n        break;\r\n\r\n      case Enums.ValueType.Number:\r\n        xmlStream.leafNode('f', attrs, model.formula);\r\n        xmlStream.leafNode('v', null, model.result);\r\n        break;\r\n\r\n      case Enums.ValueType.Boolean:\r\n        xmlStream.addAttribute('t', 'b');\r\n        xmlStream.leafNode('f', attrs, model.formula);\r\n        xmlStream.leafNode('v', null, model.result ? 1 : 0);\r\n        break;\r\n\r\n      case Enums.ValueType.Error:\r\n        xmlStream.addAttribute('t', 'e');\r\n        xmlStream.leafNode('f', attrs, model.formula);\r\n        xmlStream.leafNode('v', null, model.result.error);\r\n        break;\r\n\r\n      case Enums.ValueType.Date:\r\n        xmlStream.leafNode('f', attrs, model.formula);\r\n        xmlStream.leafNode('v', null, utils.dateToExcel(model.result, model.date1904));\r\n        break;\r\n\r\n      // case Enums.ValueType.Hyperlink: // ??\r\n      // case Enums.ValueType.Formula:\r\n      default:\r\n        throw new Error('I could not understand type of value');\r\n    }\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    if (model.type === Enums.ValueType.Null && !model.styleId) {\r\n      // if null and no style, exit\r\n      return;\r\n    }\r\n\r\n    xmlStream.openNode('c');\r\n    xmlStream.addAttribute('r', model.address);\r\n\r\n    if (model.styleId) {\r\n      xmlStream.addAttribute('s', model.styleId);\r\n    }\r\n\r\n    switch (model.type) {\r\n      case Enums.ValueType.Null:\r\n        break;\r\n\r\n      case Enums.ValueType.Number:\r\n        xmlStream.leafNode('v', null, model.value);\r\n        break;\r\n\r\n      case Enums.ValueType.Boolean:\r\n        xmlStream.addAttribute('t', 'b');\r\n        xmlStream.leafNode('v', null, model.value ? '1' : '0');\r\n        break;\r\n\r\n      case Enums.ValueType.Error:\r\n        xmlStream.addAttribute('t', 'e');\r\n        xmlStream.leafNode('v', null, model.value.error);\r\n        break;\r\n\r\n      case Enums.ValueType.String:\r\n      case Enums.ValueType.RichText:\r\n        if (model.ssId !== undefined) {\r\n          xmlStream.addAttribute('t', 's');\r\n          xmlStream.leafNode('v', null, model.ssId);\r\n        } else if (model.value && model.value.richText) {\r\n          xmlStream.addAttribute('t', 'inlineStr');\r\n          xmlStream.openNode('is');\r\n          model.value.richText.forEach(text => {\r\n            this.richTextXForm.render(xmlStream, text);\r\n          });\r\n          xmlStream.closeNode('is');\r\n        } else {\r\n          xmlStream.addAttribute('t', 'str');\r\n          xmlStream.leafNode('v', null, model.value);\r\n        }\r\n        break;\r\n\r\n      case Enums.ValueType.Date:\r\n        xmlStream.leafNode('v', null, utils.dateToExcel(model.value, model.date1904));\r\n        break;\r\n\r\n      case Enums.ValueType.Hyperlink:\r\n        if (model.ssId !== undefined) {\r\n          xmlStream.addAttribute('t', 's');\r\n          xmlStream.leafNode('v', null, model.ssId);\r\n        } else {\r\n          xmlStream.addAttribute('t', 'str');\r\n          xmlStream.leafNode('v', null, model.text);\r\n        }\r\n        break;\r\n\r\n      case Enums.ValueType.Formula:\r\n        this.renderFormula(xmlStream, model);\r\n        break;\r\n\r\n      case Enums.ValueType.Merge:\r\n        // nothing to add\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    xmlStream.closeNode(); // </c>\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'c':\r\n        // const address = colCache.decodeAddress(node.attributes.r);\r\n        this.model = {\r\n          address: node.attributes.r,\r\n        };\r\n        this.t = node.attributes.t;\r\n        if (node.attributes.s) {\r\n          this.model.styleId = parseInt(node.attributes.s, 10);\r\n        }\r\n        return true;\r\n\r\n      case 'f':\r\n        this.currentNode = 'f';\r\n        this.model.si = node.attributes.si;\r\n        this.model.shareType = node.attributes.t;\r\n        this.model.ref = node.attributes.ref;\r\n        return true;\r\n\r\n      case 'v':\r\n        this.currentNode = 'v';\r\n        return true;\r\n\r\n      case 't':\r\n        this.currentNode = 't';\r\n        return true;\r\n\r\n      case 'r':\r\n        this.parser = this.richTextXForm;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n      return;\r\n    }\r\n    switch (this.currentNode) {\r\n      case 'f':\r\n        this.model.formula = this.model.formula ? this.model.formula + text : text;\r\n        break;\r\n      case 'v':\r\n      case 't':\r\n        if (this.model.value && this.model.value.richText) {\r\n          this.model.value.richText.text = this.model.value.richText.text\r\n            ? this.model.value.richText.text + text\r\n            : text;\r\n        } else {\r\n          this.model.value = this.model.value ? this.model.value + text : text;\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    switch (name) {\r\n      case 'c': {\r\n        const {model} = this;\r\n\r\n        // first guess on cell type\r\n        if (model.formula || model.shareType) {\r\n          model.type = Enums.ValueType.Formula;\r\n          if (model.value) {\r\n            if (this.t === 'str') {\r\n              model.result = utils.xmlDecode(model.value);\r\n            } else if (this.t === 'b') {\r\n              model.result = parseInt(model.value, 10) !== 0;\r\n            } else if (this.t === 'e') {\r\n              model.result = {error: model.value};\r\n            } else {\r\n              model.result = parseFloat(model.value);\r\n            }\r\n            model.value = undefined;\r\n          }\r\n        } else if (model.value !== undefined) {\r\n          switch (this.t) {\r\n            case 's':\r\n              model.type = Enums.ValueType.String;\r\n              model.value = parseInt(model.value, 10);\r\n              break;\r\n            case 'str':\r\n              model.type = Enums.ValueType.String;\r\n              model.value = utils.xmlDecode(model.value);\r\n              break;\r\n            case 'inlineStr':\r\n              model.type = Enums.ValueType.String;\r\n              break;\r\n            case 'b':\r\n              model.type = Enums.ValueType.Boolean;\r\n              model.value = parseInt(model.value, 10) !== 0;\r\n              break;\r\n            case 'e':\r\n              model.type = Enums.ValueType.Error;\r\n              model.value = {error: model.value};\r\n              break;\r\n            default:\r\n              model.type = Enums.ValueType.Number;\r\n              model.value = parseFloat(model.value);\r\n              break;\r\n          }\r\n        } else if (model.styleId) {\r\n          model.type = Enums.ValueType.Null;\r\n        } else {\r\n          model.type = Enums.ValueType.Merge;\r\n        }\r\n        return false;\r\n      }\r\n\r\n      case 'f':\r\n      case 'v':\r\n      case 'is':\r\n        this.currentNode = undefined;\r\n        return true;\r\n\r\n      case 't':\r\n        if (this.parser) {\r\n          this.parser.parseClose(name);\r\n          return true;\r\n        }\r\n        this.currentNode = undefined;\r\n        return true;\r\n\r\n      case 'r':\r\n        this.model.value = this.model.value || {};\r\n        this.model.value.richText = this.model.value.richText || [];\r\n        this.model.value.richText.push(this.parser.model);\r\n        this.parser = undefined;\r\n        this.currentNode = undefined;\r\n        return true;\r\n\r\n      default:\r\n        if (this.parser) {\r\n          this.parser.parseClose(name);\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    const style = model.styleId && options.styles && options.styles.getStyleModel(model.styleId);\r\n    if (style) {\r\n      model.style = style;\r\n    }\r\n    if (model.styleId !== undefined) {\r\n      model.styleId = undefined;\r\n    }\r\n\r\n    switch (model.type) {\r\n      case Enums.ValueType.String:\r\n        if (typeof model.value === 'number') {\r\n          if (options.sharedStrings) {\r\n            model.value = options.sharedStrings.getString(model.value);\r\n          }\r\n        }\r\n        if (model.value.richText) {\r\n          model.type = Enums.ValueType.RichText;\r\n        }\r\n        break;\r\n\r\n      case Enums.ValueType.Number:\r\n        if (style && utils.isDateFmt(style.numFmt)) {\r\n          model.type = Enums.ValueType.Date;\r\n          model.value = utils.excelToDate(model.value, options.date1904);\r\n        }\r\n        break;\r\n\r\n      case Enums.ValueType.Formula:\r\n        if (model.result !== undefined && style && utils.isDateFmt(style.numFmt)) {\r\n          model.result = utils.excelToDate(model.result, options.date1904);\r\n        }\r\n        if (model.shareType === 'shared') {\r\n          if (model.ref) {\r\n            // master\r\n            options.formulae[model.si] = model.address;\r\n          } else {\r\n            // slave\r\n            model.sharedFormula = options.formulae[model.si];\r\n            delete model.shareType;\r\n          }\r\n          delete model.si;\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // look for hyperlink\r\n    const hyperlink = options.hyperlinkMap[model.address];\r\n    if (hyperlink) {\r\n      if (model.type === Enums.ValueType.Formula) {\r\n        model.text = model.result;\r\n        model.result = undefined;\r\n      } else {\r\n        model.text = model.value;\r\n        model.value = undefined;\r\n      }\r\n      model.type = Enums.ValueType.Hyperlink;\r\n      model.hyperlink = hyperlink;\r\n    }\r\n\r\n    const comment = options.commentsMap && options.commentsMap[model.address];\r\n    if (comment) {\r\n      model.comment = comment;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = CellXform;\r\n"],"file":"cell-xform.js"}