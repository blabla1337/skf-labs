{"version":3,"sources":["../../../../lib/xlsx/xform/static-xform.js"],"names":["BaseXform","require","XmlStream","build","xmlStream","model","openNode","tag","$","c","forEach","child","t","writeText","closeNode","StaticXform","_model","_xml","stream","xml","writeXml","name","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,wBAAD,CAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,KAAT,CAAeC,SAAf,EAA0BC,KAA1B,EAAiC;AAC/BD,EAAAA,SAAS,CAACE,QAAV,CAAmBD,KAAK,CAACE,GAAzB,EAA8BF,KAAK,CAACG,CAApC;;AACA,MAAIH,KAAK,CAACI,CAAV,EAAa;AACXJ,IAAAA,KAAK,CAACI,CAAN,CAAQC,OAAR,CAAgB,UAAAC,KAAK,EAAI;AACvBR,MAAAA,KAAK,CAACC,SAAD,EAAYO,KAAZ,CAAL;AACD,KAFD;AAGD;;AACD,MAAIN,KAAK,CAACO,CAAV,EAAa;AACXR,IAAAA,SAAS,CAACS,SAAV,CAAoBR,KAAK,CAACO,CAA1B;AACD;;AACDR,EAAAA,SAAS,CAACU,SAAV;AACD;;IAEKC,W;;;;;AACJ,uBAAYV,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BADiB,CAGjB;AACA;AACA;AACA;AACA;AACA;;AACA,UAAKW,MAAL,GAAcX,KAAd;AATiB;AAUlB;;;;2BAEMD,S,EAAW;AAChB,UAAI,CAAC,KAAKa,IAAV,EAAgB;AACd,YAAMC,MAAM,GAAG,IAAIhB,SAAJ,EAAf;AACAC,QAAAA,KAAK,CAACe,MAAD,EAAS,KAAKF,MAAd,CAAL;AACA,aAAKC,IAAL,GAAYC,MAAM,CAACC,GAAnB;AACD;;AACDf,MAAAA,SAAS,CAACgB,QAAV,CAAmB,KAAKH,IAAxB;AACD;;;gCAEW;AACV,aAAO,IAAP;AACD;;;gCAEW,CAAE;;;+BAEHI,I,EAAM;AACf,cAAQA,IAAR;AACE,aAAK,KAAKL,MAAL,CAAYT,GAAjB;AACE,iBAAO,KAAP;;AACF;AACE,iBAAO,IAAP;AAJJ;AAMD;;;;EAnCuBP,S;;AAsC1BsB,MAAM,CAACC,OAAP,GAAiBR,WAAjB","sourcesContent":["const BaseXform = require('./base-xform');\r\nconst XmlStream = require('../../utils/xml-stream');\r\n\r\n// const model = {\r\n//   tag: 'name',\r\n//   $: {attr: 'value'},\r\n//   c: [\r\n//     { tag: 'child' }\r\n//   ],\r\n//   t: 'some text'\r\n// };\r\n\r\nfunction build(xmlStream, model) {\r\n  xmlStream.openNode(model.tag, model.$);\r\n  if (model.c) {\r\n    model.c.forEach(child => {\r\n      build(xmlStream, child);\r\n    });\r\n  }\r\n  if (model.t) {\r\n    xmlStream.writeText(model.t);\r\n  }\r\n  xmlStream.closeNode();\r\n}\r\n\r\nclass StaticXform extends BaseXform {\r\n  constructor(model) {\r\n    super();\r\n\r\n    // This class is an optimisation for static (unimportant and unchanging) xml\r\n    // It is stateless - apart from its static model and so can be used as a singleton\r\n    // Being stateless - it will only track entry to and exit from it's root xml tag during parsing and nothing else\r\n    // Known issues:\r\n    //    since stateless - parseOpen always returns true. Parent xform must know when to start using this xform\r\n    //    if the root tag is recursive, the parsing will behave unpredictably\r\n    this._model = model;\r\n  }\r\n\r\n  render(xmlStream) {\r\n    if (!this._xml) {\r\n      const stream = new XmlStream();\r\n      build(stream, this._model);\r\n      this._xml = stream.xml;\r\n    }\r\n    xmlStream.writeXml(this._xml);\r\n  }\r\n\r\n  parseOpen() {\r\n    return true;\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose(name) {\r\n    switch (name) {\r\n      case this._model.tag:\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = StaticXform;\r\n"],"file":"static-xform.js"}