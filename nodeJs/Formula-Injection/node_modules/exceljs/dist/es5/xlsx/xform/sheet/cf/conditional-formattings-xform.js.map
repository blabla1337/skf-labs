{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf/conditional-formattings-xform.js"],"names":["BaseXform","require","ConditionalFormattingXform","ConditionalFormattingsXform","cfXform","model","options","nextPriority","reduce","p","cf","Math","max","rules","map","rule","priority","forEach","style","dxfId","styles","addDxfStyle","xmlStream","render","node","parser","parseOpen","name","text","parseText","parseClose","push","undefined","getDxfStyle","module","exports"],"mappings":"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","sourcesContent":["const BaseXform = require('../../base-xform');\r\n\r\nconst ConditionalFormattingXform = require('./conditional-formatting-xform');\r\n\r\nclass ConditionalFormattingsXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.cfXform = new ConditionalFormattingXform();\r\n  }\r\n\r\n  get tag() {\r\n    return 'conditionalFormatting';\r\n  }\r\n\r\n  reset() {\r\n    this.model = [];\r\n  }\r\n\r\n  prepare(model, options) {\r\n    // ensure each rule has a priority value\r\n    let nextPriority = model.reduce(\r\n      (p, cf) => Math.max(p, ...cf.rules.map(rule => rule.priority || 0)),\r\n      1\r\n    );\r\n    model.forEach(cf => {\r\n      cf.rules.forEach(rule => {\r\n        if (!rule.priority) {\r\n          rule.priority = nextPriority++;\r\n        }\r\n\r\n        if (rule.style) {\r\n          rule.dxfId = options.styles.addDxfStyle(rule.style);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    model.forEach(cf => {\r\n      this.cfXform.render(xmlStream, cf);\r\n    });\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n\r\n    switch (node.name) {\r\n      case 'conditionalFormatting':\r\n        this.parser = this.cfXform;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.push(this.parser.model);\r\n        this.parser = undefined;\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    model.forEach(cf => {\r\n      cf.rules.forEach(rule => {\r\n        if (rule.dxfId !== undefined) {\r\n          rule.style = options.styles.getDxfStyle(rule.dxfId);\r\n          delete rule.dxfId;\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = ConditionalFormattingsXform;\r\n"],"file":"conditional-formattings-xform.js"}