{"version":3,"sources":["../../../../../lib/xlsx/xform/style/style-xform.js"],"names":["BaseXform","require","AlignmentXform","ProtectionXform","StyleXform","options","xfId","map","alignment","protection","xmlStream","model","openNode","numFmtId","fontId","fillId","borderId","addAttribute","render","closeNode","node","parser","parseOpen","name","parseInt","attributes","text","parseText","parseClose","undefined","module","exports"],"mappings":"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","sourcesContent":["const BaseXform = require('../base-xform');\r\n\r\nconst AlignmentXform = require('./alignment-xform');\r\nconst ProtectionXform = require('./protection-xform');\r\n\r\n// <xf numFmtId=\"[numFmtId]\" fontId=\"[fontId]\" fillId=\"[fillId]\" borderId=\"[xf.borderId]\" xfId=\"[xfId]\">\r\n//   Optional <alignment>\r\n//   Optional <protection>\r\n// </xf>\r\n\r\n// Style assists translation from style model to/from xlsx\r\nclass StyleXform extends BaseXform {\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.xfId = !!(options && options.xfId);\r\n    this.map = {\r\n      alignment: new AlignmentXform(),\r\n      protection: new ProtectionXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'xf';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode('xf', {\r\n      numFmtId: model.numFmtId || 0,\r\n      fontId: model.fontId || 0,\r\n      fillId: model.fillId || 0,\r\n      borderId: model.borderId || 0,\r\n    });\r\n    if (this.xfId) {\r\n      xmlStream.addAttribute('xfId', model.xfId || 0);\r\n    }\r\n\r\n    if (model.numFmtId) {\r\n      xmlStream.addAttribute('applyNumberFormat', '1');\r\n    }\r\n    if (model.fontId) {\r\n      xmlStream.addAttribute('applyFont', '1');\r\n    }\r\n    if (model.fillId) {\r\n      xmlStream.addAttribute('applyFill', '1');\r\n    }\r\n    if (model.borderId) {\r\n      xmlStream.addAttribute('applyBorder', '1');\r\n    }\r\n    if (model.alignment) {\r\n      xmlStream.addAttribute('applyAlignment', '1');\r\n    }\r\n    if (model.protection) {\r\n      xmlStream.addAttribute('applyProtection', '1');\r\n    }\r\n\r\n    /**\r\n     * Rendering tags causes close of XML stream.\r\n     * Therefore adding attributes must be done before rendering tags.\r\n     */\r\n\r\n    if (model.alignment) {\r\n      this.map.alignment.render(xmlStream, model.alignment);\r\n    }\r\n    if (model.protection) {\r\n      this.map.protection.render(xmlStream, model.protection);\r\n    }\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    // used during sax parsing of xml to build font object\r\n    switch (node.name) {\r\n      case 'xf':\r\n        this.model = {\r\n          numFmtId: parseInt(node.attributes.numFmtId, 10),\r\n          fontId: parseInt(node.attributes.fontId, 10),\r\n          fillId: parseInt(node.attributes.fillId, 10),\r\n          borderId: parseInt(node.attributes.borderId, 10),\r\n        };\r\n        if (this.xfId) {\r\n          this.model.xfId = parseInt(node.attributes.xfId, 10);\r\n        }\r\n        return true;\r\n      case 'alignment':\r\n        this.parser = this.map.alignment;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      case 'protection':\r\n        this.parser = this.map.protection;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        if (this.map.protection === this.parser) {\r\n          this.model.protection = this.parser.model;\r\n        } else {\r\n          this.model.alignment = this.parser.model;\r\n        }\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    return name !== 'xf';\r\n  }\r\n}\r\n\r\nmodule.exports = StyleXform;\r\n"],"file":"style-xform.js"}