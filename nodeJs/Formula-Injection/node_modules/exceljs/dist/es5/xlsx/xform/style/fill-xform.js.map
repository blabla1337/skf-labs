{"version":3,"sources":["../../../../../lib/xlsx/xform/style/fill-xform.js"],"names":["BaseXform","require","ColorXform","StopXform","map","color","xmlStream","model","openNode","addAttribute","position","render","closeNode","node","parser","parseOpen","name","parseFloat","attributes","parseClose","undefined","PatternFillXform","fgColor","bgColor","pattern","type","patternType","text","parseText","GradientFillXform","stop","gradient","degree","center","left","right","top","bottom","stopXform","stops","forEach","stopModel","parseInt","push","FillXform","patternFill","gradientFill","addRollback","rollback","commit","value","validPatternValues","reduce","p","v","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable max-classes-per-file */\r\nconst BaseXform = require('../base-xform');\r\n\r\nconst ColorXform = require('./color-xform');\r\n\r\nclass StopXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      color: new ColorXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'stop';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode('stop');\r\n    xmlStream.addAttribute('position', model.position);\r\n    this.map.color.render(xmlStream, model.color);\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'stop':\r\n        this.model = {\r\n          position: parseFloat(node.attributes.position),\r\n        };\r\n        return true;\r\n      case 'color':\r\n        this.parser = this.map.color;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText() {}\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.color = this.parser.model;\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nclass PatternFillXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      fgColor: new ColorXform('fgColor'),\r\n      bgColor: new ColorXform('bgColor'),\r\n    };\r\n  }\r\n\r\n  get name() {\r\n    return 'pattern';\r\n  }\r\n\r\n  get tag() {\r\n    return 'patternFill';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode('patternFill');\r\n    xmlStream.addAttribute('patternType', model.pattern);\r\n    if (model.fgColor) {\r\n      this.map.fgColor.render(xmlStream, model.fgColor);\r\n    }\r\n    if (model.bgColor) {\r\n      this.map.bgColor.render(xmlStream, model.bgColor);\r\n    }\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'patternFill':\r\n        this.model = {\r\n          type: 'pattern',\r\n          pattern: node.attributes.patternType,\r\n        };\r\n        return true;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        if (this.parser.model) {\r\n          this.model[name] = this.parser.model;\r\n        }\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nclass GradientFillXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      stop: new StopXform(),\r\n    };\r\n    // if (model) {\r\n    //   this.gradient = model.gradient;\r\n    //   if (model.center) {\r\n    //     this.center = model.center;\r\n    //   }\r\n    //   if (model.degree !== undefined) {\r\n    //     this.degree = model.degree;\r\n    //   }\r\n    //   this.stops = model.stops.map(function(stop) { return new StopXform(stop); });\r\n    // } else {\r\n    //   this.stops = [];\r\n    // }\r\n  }\r\n\r\n  get name() {\r\n    return 'gradient';\r\n  }\r\n\r\n  get tag() {\r\n    return 'gradientFill';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode('gradientFill');\r\n    switch (model.gradient) {\r\n      case 'angle':\r\n        xmlStream.addAttribute('degree', model.degree);\r\n        break;\r\n      case 'path':\r\n        xmlStream.addAttribute('type', 'path');\r\n        if (model.center.left) {\r\n          xmlStream.addAttribute('left', model.center.left);\r\n          if (model.center.right === undefined) {\r\n            xmlStream.addAttribute('right', model.center.left);\r\n          }\r\n        }\r\n        if (model.center.right) {\r\n          xmlStream.addAttribute('right', model.center.right);\r\n        }\r\n        if (model.center.top) {\r\n          xmlStream.addAttribute('top', model.center.top);\r\n          if (model.center.bottom === undefined) {\r\n            xmlStream.addAttribute('bottom', model.center.top);\r\n          }\r\n        }\r\n        if (model.center.bottom) {\r\n          xmlStream.addAttribute('bottom', model.center.bottom);\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    const stopXform = this.map.stop;\r\n    model.stops.forEach(stopModel => {\r\n      stopXform.render(xmlStream, stopModel);\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'gradientFill': {\r\n        const model = (this.model = {\r\n          stops: [],\r\n        });\r\n        if (node.attributes.degree) {\r\n          model.gradient = 'angle';\r\n          model.degree = parseInt(node.attributes.degree, 10);\r\n        } else if (node.attributes.type === 'path') {\r\n          model.gradient = 'path';\r\n          model.center = {\r\n            left: node.attributes.left ? parseFloat(node.attributes.left) : 0,\r\n            top: node.attributes.top ? parseFloat(node.attributes.top) : 0,\r\n          };\r\n          if (node.attributes.right !== node.attributes.left) {\r\n            model.center.right = node.attributes.right ? parseFloat(node.attributes.right) : 0;\r\n          }\r\n          if (node.attributes.bottom !== node.attributes.top) {\r\n            model.center.bottom = node.attributes.bottom ? parseFloat(node.attributes.bottom) : 0;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n\r\n      case 'stop':\r\n        this.parser = this.map.stop;\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.stops.push(this.parser.model);\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n// Fill encapsulates translation from fill model to/from xlsx\r\nclass FillXform extends BaseXform {\r\n  constructor() {\r\n    super();\r\n\r\n    this.map = {\r\n      patternFill: new PatternFillXform(),\r\n      gradientFill: new GradientFillXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'fill';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.addRollback();\r\n    xmlStream.openNode('fill');\r\n    switch (model.type) {\r\n      case 'pattern':\r\n        this.map.patternFill.render(xmlStream, model);\r\n        break;\r\n      case 'gradient':\r\n        this.map.gradientFill.render(xmlStream, model);\r\n        break;\r\n      default:\r\n        xmlStream.rollback();\r\n        return;\r\n    }\r\n    xmlStream.closeNode();\r\n    xmlStream.commit();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case 'fill':\r\n        this.model = {};\r\n        return true;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n        }\r\n        return false;\r\n    }\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model = this.parser.model;\r\n        this.model.type = this.parser.name;\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  validStyle(value) {\r\n    return FillXform.validPatternValues[value];\r\n  }\r\n}\r\n\r\nFillXform.validPatternValues = [\r\n  'none',\r\n  'solid',\r\n  'darkVertical',\r\n  'darkGray',\r\n  'mediumGray',\r\n  'lightGray',\r\n  'gray125',\r\n  'gray0625',\r\n  'darkHorizontal',\r\n  'darkVertical',\r\n  'darkDown',\r\n  'darkUp',\r\n  'darkGrid',\r\n  'darkTrellis',\r\n  'lightHorizontal',\r\n  'lightVertical',\r\n  'lightDown',\r\n  'lightUp',\r\n  'lightGrid',\r\n  'lightTrellis',\r\n  'lightGrid',\r\n].reduce((p, v) => {\r\n  p[v] = true;\r\n  return p;\r\n}, {});\r\n\r\nFillXform.StopXform = StopXform;\r\nFillXform.PatternFillXform = PatternFillXform;\r\nFillXform.GradientFillXform = GradientFillXform;\r\n\r\nmodule.exports = FillXform;\r\n"],"file":"fill-xform.js"}